package calendar

import (
	"fmt"
	"math"
	"strconv"
	"strings"
	"time"
)

type BaZhi struct {
	//是否区分 早晚子 时,true则23:00-24:00算成上一天
	// 我们是按24点为分割线的
	Zwz bool

	//10天干
	Ctg [10]string

	//五行
	Cwx [5]string

	//天干对应五行
	TgWx [10]int

	//十二地支
	Cdz [12]string

	//地支对应五行
	DzWx [12]int

	//地支藏干
	DzCg [12][]int

	//十二生肖
	Csa [12]string

	//十二星座
	Cxz [12]string

	//星期
	Wkd [7]string

	//廿四节气(从春分开始)
	Jq    [24]string
	JqAll [24]string

	//均值朔望月長
	SynMonth float64

	//节气
	NutB  []float64  // 章动表
	Dts   []float64  // 世界时与原子时之差计算表
	Rad   float64    //每弧度的角秒数
	J2000 float64    // 2000年前儒略日数(2000-1-1
	GXCe  [3]float64 // 离心率
	GXCp  [3]float64 // 近点
	GXCl  [5]float64 // 太平黄经
	GXCk  float64    // 光行差常数

	// ==================日位置计算===================
	EnnT float64
	MnnT float64
	E10  []float64
	E11  []float64
	E12  []float64
	E13  []float64
	E14  []float64
	E15  []float64
	E20  []float64
	E21  []float64
	E30  []float64
	E31  []float64
	E32  []float64
	E33  []float64

	//月球运动参数
	M10 []float64
	M11 []float64
	M12 []float64
	M20 []float64
	M21 []float64
	M30 []float64
	M31 []float64
	M1n []float64

	PreceB        []float64 //Date黄道上的岁差p
	YueMing       [12]string
	JiaZhi        []string
	MonthBaseData []int
}

func NewBaZhi(zwz bool) *BaZhi {
	return &BaZhi{
		Zwz:      zwz,
		Ctg:      [10]string{"甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"},
		Cwx:      [5]string{"金", "木", "水", "火", "土"},
		TgWx:     [10]int{1, 1, 3, 3, 4, 4, 0, 0, 2, 2},
		Cdz:      [12]string{"子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"},
		DzWx:     [12]int{2, 4, 1, 1, 4, 3, 3, 4, 0, 0, 4, 2},
		DzCg:     [12][]int{{9}, {5, 9, 7}, {0, 2, 4}, {1}, {4, 1, 9}, {2, 4, 6}, {3, 5}, {5, 3, 1}, {6, 8, 4}, {7}, {4, 7, 3}, {8, 0}},
		Csa:      [12]string{"鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"},
		Cxz:      [12]string{"水瓶座", "双鱼座", "白羊座", "金牛座", "双子座", "巨蟹座", "狮子座", "处女座", "天秤座", "天蝎座", "射手座", "摩羯座"},
		Wkd:      [7]string{"日", "一", "二", "三", "四", "五", "六"},
		Jq:       [24]string{"春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至", "小寒", "大寒", "立春", "雨水", "惊蛰"},
		JqAll:    [24]string{"立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至", "小寒", "大寒"},
		SynMonth: 29.530588853,
		NutB: []float64{2.1824391966, -33.757045954, 0.0000362262, 3.7340e-08, -2.8793e-10,
			-171996, -1742, 92025, 89, 3.5069406862, 1256.663930738,
			0.0000105845, 6.9813e-10, -2.2815e-10, -13187, -16, 5736, -31,
			1.3375032491, 16799.418221925, -0.0000511866, 6.4626e-08,
			-5.3543e-10, -2274, -2, 977, -5, 4.3648783932, -67.514091907,
			0.0000724525, 7.4681e-08, -5.7586e-10, 2062, 2, -895, 5,
			0.0431251803, -628.301955171, 0.0000026820, 6.5935e-10, 5.5705e-11,
			-1426, 34, 54, -1, 2.3555557435, 8328.691425719, 0.0001545547,
			2.5033e-07, -1.1863e-09, 712, 1, -7, 0, 3.4638155059,
			1884.965885909, 0.0000079025, 3.8785e-11, -2.8386e-10, -517, 12,
			224, -6, 5.4382493597, 16833.175267879, -0.0000874129, 2.7285e-08,
			-2.4750e-10, -386, -4, 200, 0, 3.6930589926, 25128.109647645,
			0.0001033681, 3.1496e-07, -1.7218e-09, -301, 0, 129, -1,
			3.5500658664, 628.361975567, 0.0000132664, 1.3575e-09, -1.7245e-10,
			217, -5, -95, 3},
		Dts: []float64{-4000, 108371.7, -13036.80, 392.000, 0.0000, -500, 17201.0,
			-627.82, 16.170, -0.3413, -150, 12200.6, -346.41, 5.403, -0.1593,
			150, 9113.8, -328.13, -1.647, 0.0377, 500, 5707.5, -391.41, 0.915,
			0.3145, 900, 2203.4, -283.45, 13.034, -0.1778, 1300, 490.1, -57.35,
			2.085, -0.0072, 1600, 120.0, -9.81, -1.532, 0.1403, 1700, 10.2,
			-0.91, 0.510, -0.0370, 1800, 13.4, -0.72, 0.202, -0.0193, 1830,
			7.8, -1.81, 0.416, -0.0247, 1860, 8.3, -0.13, -0.406, 0.0292, 1880,
			-5.4, 0.32, -0.183, 0.0173, 1900, -2.3, 2.06, 0.169, -0.0135, 1920,
			21.2, 1.69, -0.304, 0.0167, 1940, 24.2, 1.22, -0.064, 0.0031, 1960,
			33.2, 0.51, 0.231, -0.0109, 1980, 51.0, 1.29, -0.026, 0.0032, 2000,
			64.7, -1.66, 5.224, -0.2905, 2150, 279.4, 732.95, 429.579, 0.0158,
			6000},
		Rad:   180 * 3600 / math.Pi,
		J2000: 2451545.0,
		GXCe:  [3]float64{0.016708634, -0.000042037, -0.0000001267},
		GXCp:  [3]float64{102.93735 / (180 / math.Pi), 1.71946 / (180 / math.Pi), 0.00046 / (180 / math.Pi)},
		GXCl: [5]float64{280.4664567 / (180 / math.Pi),
			36000.76982779 / (180 / math.Pi),
			0.0003032028 / (180 / math.Pi),
			0.0,
			0.0},
		GXCk: 20.49552 / (180 * 3600 / math.Pi),
		EnnT: 0,
		MnnT: 0,
		E10: []float64{1.75347045673, 0.00000000000, 0.0000000000, 0.03341656456, 4.66925680417, 6283.0758499914, 0.00034894275, 4.62610241759, 12566.1516999828, 0.00003417571, 2.82886579606, 3.5231183490,
			0.00003497056, 2.74411800971, 5753.3848848968, 0.00003135896, 3.62767041758, 77713.7714681205, 0.00002676218, 4.41808351397, 7860.4193924392, 0.00002342687, 6.13516237631, 3930.2096962196,
			0.00001273166, 2.03709655772, 529.6909650946, 0.00001324292, 0.74246356352, 11506.7697697936, 0.00000901855, 2.04505443513, 26.2983197998, 0.00001199167, 1.10962944315, 1577.3435424478,
			0.00000857223, 3.50849156957, 398.1490034082, 0.00000779786, 1.17882652114, 5223.6939198022, 0.00000990250, 5.23268129594, 5884.9268465832, 0.00000753141, 2.53339053818, 5507.5532386674,
			0.00000505264, 4.58292563052, 18849.2275499742, 0.00000492379, 4.20506639861, 775.5226113240, 0.00000356655, 2.91954116867, 0.0673103028, 0.00000284125, 1.89869034186, 796.2980068164,
			0.00000242810, 0.34481140906, 5486.7778431750, 0.00000317087, 5.84901952218, 11790.6290886588, 0.00000271039, 0.31488607649, 10977.0788046990, 0.00000206160, 4.80646606059, 2544.3144198834,
			0.00000205385, 1.86947813692, 5573.1428014331, 0.00000202261, 2.45767795458, 6069.7767545534, 0.00000126184, 1.08302630210, 20.7753954924, 0.00000155516, 0.83306073807, 213.2990954380,
			0.00000115132, 0.64544911683, 0.9803210682, 0.00000102851, 0.63599846727, 4694.0029547076, 0.00000101724, 4.26679821365, 7.1135470008, 0.00000099206, 6.20992940258, 2146.1654164752,
			0.00000132212, 3.41118275555, 2942.4634232916, 0.00000097607, 0.68101272270, 155.4203994342, 0.00000085128, 1.29870743025, 6275.9623029906, 0.00000074651, 1.75508916159, 5088.6288397668,
			0.00000101895, 0.97569221824, 15720.8387848784, 0.00000084711, 3.67080093025, 71430.6956181291, 0.00000073547, 4.67926565481, 801.8209311238, 0.00000073874, 3.50319443167, 3154.6870848956,
			0.00000078756, 3.03698313141, 12036.4607348882, 0.00000079637, 1.80791330700, 17260.1546546904, 0.00000085803, 5.98322631256, 161000.6857376741, 0.00000056963, 2.78430398043, 6286.5989683404,
			0.00000061148, 1.81839811024, 7084.8967811152, 0.00000069627, 0.83297596966, 9437.7629348870, 0.00000056116, 4.38694880779, 14143.4952424306, 0.00000062449, 3.97763880587, 8827.3902698748,
			0.00000051145, 0.28306864501, 5856.4776591154, 0.00000055577, 3.47006009062, 6279.5527316424, 0.00000041036, 5.36817351402, 8429.2412664666, 0.00000051605, 1.33282746983, 1748.0164130670,
			0.00000051992, 0.18914945834, 12139.5535091068, 0.00000049000, 0.48735065033, 1194.4470102246, 0.00000039200, 6.16832995016, 10447.3878396044, 0.00000035566, 1.77597314691, 6812.7668150860,
			0.00000036770, 6.04133859347, 10213.2855462110, 0.00000036596, 2.56955238628, 1059.3819301892, 0.00000033291, 0.59309499459, 17789.8456197850, 0.00000035954, 1.70876111898, 2352.8661537718},
		E11: []float64{6283.31966747491, 0.00000000000, 0.0000000000, 0.00206058863, 2.67823455584, 6283.0758499914, 0.00004303430, 2.63512650414, 12566.1516999828, 0.00000425264, 1.59046980729, 3.5231183490,
			0.00000108977, 2.96618001993, 1577.3435424478, 0.00000093478, 2.59212835365, 18849.2275499742, 0.00000119261, 5.79557487799, 26.2983197998, 0.00000072122, 1.13846158196, 529.6909650946,
			0.00000067768, 1.87472304791, 398.1490034082, 0.00000067327, 4.40918235168, 5507.5532386674, 0.00000059027, 2.88797038460, 5223.6939198022, 0.00000055976, 2.17471680261, 155.4203994342,
			0.00000045407, 0.39803079805, 796.2980068164, 0.00000036369, 0.46624739835, 775.5226113240, 0.00000028958, 2.64707383882, 7.1135470008, 0.00000019097, 1.84628332577, 5486.7778431750,
			0.00000020844, 5.34138275149, 0.9803210682, 0.00000018508, 4.96855124577, 213.2990954380, 0.00000016233, 0.03216483047, 2544.3144198834, 0.00000017293, 2.99116864949, 6275.9623029906},
		E12: []float64{0.00052918870, 0.00000000000, 0.0000000000, 0.00008719837, 1.07209665242, 6283.0758499914, 0.00000309125, 0.86728818832, 12566.1516999828, 0.00000027339, 0.05297871691, 3.5231183490,
			0.00000016334, 5.18826691036, 26.2983197998, 0.00000015752, 3.68457889430, 155.4203994342, 0.00000009541, 0.75742297675, 18849.2275499742, 0.00000008937, 2.05705419118, 77713.7714681205,
			0.00000006952, 0.82673305410, 775.5226113240, 0.00000005064, 4.66284525271, 1577.3435424478},
		E13: []float64{0.00000289226, 5.84384198723, 6283.0758499914, 0.00000034955, 0.00000000000, 0.0000000000, 0.00000016819, 5.48766912348, 12566.1516999828},
		E14: []float64{0.00000114084, 3.14159265359, 0.0000000000, 0.00000007717, 4.13446589358, 6283.0758499914, 0.00000000765, 3.83803776214, 12566.1516999828},
		E15: []float64{0.00000000878, 3.14159265359, 0.0000000000},
		E20: []float64{0.00000279620, 3.19870156017, 84334.6615813083, 0.00000101643, 5.42248619256, 5507.5532386674, 0.00000080445, 3.88013204458, 5223.6939198022, 0.00000043806, 3.70444689758, 2352.8661537718,
			0.00000031933, 4.00026369781, 1577.3435424478, 0.00000022724, 3.98473831560, 1047.7473117547, 0.00000016392, 3.56456119782, 5856.4776591154, 0.00000018141, 4.98367470263, 6283.0758499914,
			0.00000014443, 3.70275614914, 9437.7629348870, 0.00000014304, 3.41117857525, 10213.2855462110},
		E21: []float64{0.00000009030, 3.89729061890, 5507.5532386674, 0.00000006177, 1.73038850355, 5223.6939198022},
		E30: []float64{1.00013988799, 0.00000000000, 0.0000000000, 0.01670699626, 3.09846350771, 6283.0758499914, 0.00013956023, 3.05524609620, 12566.1516999828, 0.00003083720, 5.19846674381, 77713.7714681205,
			0.00001628461, 1.17387749012, 5753.3848848968, 0.00001575568, 2.84685245825, 7860.4193924392, 0.00000924799, 5.45292234084, 11506.7697697936, 0.00000542444, 4.56409149777, 3930.2096962196},
		E31: []float64{0.00103018608, 1.10748969588, 6283.0758499914, 0.00001721238, 1.06442301418, 12566.1516999828, 0.00000702215, 3.14159265359, 0.0000000000},
		E32: []float64{0.00004359385, 5.78455133738, 6283.0758499914},
		E33: []float64{0.00000144595, 4.27319435148, 6283.0758499914},
		M10: []float64{22639.5858800, 2.3555545723, 8328.6914247251, 1.5231275e-04, 2.5041111e-07, -1.1863391e-09, 4586.4383203, 8.0413790709, 7214.0628654588, -2.1850087e-04, -1.8646419e-07, 8.7760973e-10, 2369.9139357, 10.3969336431, 15542.7542901840, -6.6188121e-05, 6.3946925e-08, -3.0872935e-10, 769.0257187, 4.7111091445, 16657.3828494503, 3.0462550e-04, 5.0082223e-07, -2.3726782e-09,
			-666.4175399, -0.0431256817, 628.3019552485, -2.6638815e-06, 6.1639211e-10, -5.4439728e-11, -411.5957339, 3.2558104895, 16866.9323152810, -1.2804259e-04, -9.8998954e-09, 4.0433461e-11, 211.6555524, 5.6858244986, -1114.6285592663, -3.7081362e-04, -4.3687530e-07, 2.0639488e-09, 205.4359530, 8.0845047526, 6585.7609102104, -2.1583699e-04, -1.8708058e-07, 9.3204945e-10,
			191.9561973, 12.7524882154, 23871.4457149091, 8.6124629e-05, 3.1435804e-07, -1.4950684e-09, 164.7286185, 10.4400593249, 14914.4523349355, -6.3524240e-05, 6.3330532e-08, -2.5428962e-10, -147.3213842, -2.3986802540, -7700.3894694766, -1.5497663e-04, -2.4979472e-07, 1.1318993e-09, -124.9881185, 5.1984668216, 7771.3771450920, -3.3094061e-05, 3.1973462e-08, -1.5436468e-10,
			-109.3803637, 2.3124288905, 8956.9933799736, 1.4964887e-04, 2.5102751e-07, -1.2407788e-09, 55.1770578, 7.1411231536, -1324.1780250970, 6.1854469e-05, 7.3846820e-08, -3.4916281e-10, -45.0996092, 5.6113650618, 25195.6237400061, 2.4270161e-05, 2.4051122e-07, -1.1459056e-09, 39.5333010, -0.9002559173, -8538.2408905558, 2.8035534e-04, 2.6031101e-07, -1.2267725e-09,
			38.4298346, 18.4383127140, 22756.8171556428, -2.8468899e-04, -1.2251727e-07, 5.6888037e-10, 36.1238141, 7.0666637168, 24986.0742741754, 4.5693825e-04, 7.5123334e-07, -3.5590172e-09, 30.7725751, 16.0827581417, 14428.1257309177, -4.3700174e-04, -3.7292838e-07, 1.7552195e-09, -28.3971008, 7.9982533891, 7842.3648207073, -2.2116475e-04, -1.8584780e-07, 8.2317000e-10,
			-24.3582283, 10.3538079614, 16171.0562454324, -6.8852003e-05, 6.4563317e-08, -3.6316908e-10, -18.5847068, 2.8429122493, -557.3142796331, -1.8540681e-04, -2.1843765e-07, 1.0319744e-09, 17.9544674, 5.1553411398, 8399.6791003405, -3.5757942e-05, 3.2589854e-08, -2.0880440e-10, 14.5302779, 12.7956138971, 23243.1437596606, 8.8788511e-05, 3.1374165e-07, -1.4406287e-09,
			14.3796974, 15.1080427876, 32200.1371396342, 2.3843738e-04, 5.6476915e-07, -2.6814075e-09, 14.2514576, -24.0810366320, -2.3011998397, 1.5231275e-04, 2.5041111e-07, -1.1863391e-09, 13.8990596, 20.7938672862, 31085.5085803679, -1.3237624e-04, 1.2789385e-07, -6.1745870e-10, 13.1940636, 3.3302699264, -9443.3199839914, -5.2312637e-04, -6.8728642e-07, 3.2502879e-09,
			-9.6790568, -4.7542348263, -16029.0808942018, -3.0728938e-04, -5.0020584e-07, 2.3182384e-09, -9.3658635, 11.2971895604, 24080.9951807398, -3.4654346e-04, -1.9636409e-07, 9.1804319e-10, 8.6055318, 5.7289501804, -1742.9305145148, -3.6814974e-04, -4.3749170e-07, 2.1183885e-09, -8.4530982, 7.5540213938, 16100.0685698171, 1.1921869e-04, 2.8238458e-07, -1.3407038e-09,
			8.0501724, 10.4831850066, 14286.1503796870, -6.0860358e-05, 6.2714140e-08, -1.9984990e-10, -7.6301553, 4.6679834628, 17285.6848046987, 3.0196162e-04, 5.0143862e-07, -2.4271179e-09, -7.4474952, -0.0862513635, 1256.6039104970, -5.3277630e-06, 1.2327842e-09, -1.0887946e-10, 7.3712011, 8.1276304344, 5957.4589549619, -2.1317311e-04, -1.8769697e-07, 9.8648918e-10,
			7.0629900, 0.9591375719, 33.7570471374, -3.0829302e-05, -3.6967043e-08, 1.7385419e-10, -6.3831491, 9.4966777258, 7004.5133996281, 2.1416722e-04, 3.2425793e-07, -1.5355019e-09, -5.7416071, 13.6527441326, 32409.6866054649, -1.9423071e-04, 5.4047029e-08, -2.6829589e-10, 4.3740095, 18.4814383957, 22128.5152003943, -2.8202511e-04, -1.2313366e-07, 6.2332010e-10,
			-3.9976134, 7.9669196340, 33524.3151647312, 1.7658291e-04, 4.9092233e-07, -2.3322447e-09, -3.2096876, 13.2398458924, 14985.4400105508, -2.5159493e-04, -1.5449073e-07, 7.2324505e-10, -2.9145404, 12.7093625336, 24499.7476701576, 8.3460748e-05, 3.1497443e-07, -1.5495082e-09, 2.7318890, 16.1258838235, 13799.8237756692, -4.3433786e-04, -3.7354477e-07, 1.8096592e-09,
			-2.5679459, -2.4418059357, -7072.0875142282, -1.5764051e-04, -2.4917833e-07, 1.0774596e-09, -2.5211990, 7.9551277074, 8470.6667759558, -2.2382863e-04, -1.8523141e-07, 7.6873027e-10, 2.4888871, 5.6426988169, -486.3266040178, -3.7347750e-04, -4.3625891e-07, 2.0095091e-09, 2.1460741, 7.1842488353, -1952.4799803455, 6.4518350e-05, 7.3230428e-08, -2.9472308e-10,
			1.9777270, 23.1494218585, 39414.2000050930, 1.9936508e-05, 3.7830496e-07, -1.8037978e-09, 1.9336825, 9.4222182890, 33314.7656989005, 6.0925100e-04, 1.0016445e-06, -4.7453563e-09, 1.8707647, 20.8369929680, 30457.2066251194, -1.2971236e-04, 1.2727746e-07, -5.6301898e-10, -1.7529659, 0.4873576771, -8886.0057043583, -3.3771956e-04, -4.6884877e-07, 2.2183135e-09,
			-1.4371624, 7.0979974718, -695.8760698485, 5.9190587e-05, 7.4463212e-08, -4.0360254e-10, -1.3725701, 1.4552986550, -209.5494658307, 4.3266809e-04, 5.1072212e-07, -2.4131116e-09, 1.2618162, 7.5108957121, 16728.3705250656, 1.1655481e-04, 2.8300097e-07, -1.3951435e-09},
		M11: []float64{1.6768000, -0.0431256817, 628.3019552485, -2.6638815e-06, 6.1639211e-10, -5.4439728e-11, 0.5164200, 11.2260974062, 6585.7609102104, -2.1583699e-04, -1.8708058e-07, 9.3204945e-10, 0.4138300, 13.5816519784, 14914.4523349355, -6.3524240e-05, 6.3330532e-08, -2.5428962e-10, 0.3711500, 5.5402729076, 7700.3894694766, 1.5497663e-04, 2.4979472e-07, -1.1318993e-09,
			0.2756000, 2.3124288905, 8956.9933799736, 1.4964887e-04, 2.5102751e-07, -1.2407788e-09, 0.2459863, -25.6198212459, -2.3011998397, 1.5231275e-04, 2.5041111e-07, -1.1863391e-09, 0.0711800, 7.9982533891, 7842.3648207073, -2.2116475e-04, -1.8584780e-07, 8.2317000e-10, 0.0612800, 10.3538079614, 16171.0562454324, -6.8852003e-05, 6.4563317e-08, -3.6316908e-10},
		M12: []float64{0.0048700, -0.0431256817, 628.3019552485, -2.6638815e-06, 6.1639211e-10, -5.4439728e-11, 0.0022800, -27.1705318325, -2.3011998397, 1.5231275e-04, 2.5041111e-07, -1.1863391e-09, 0.0015000, 11.2260974062, 6585.7609102104, -2.1583699e-04, -1.8708058e-07, 9.3204945e-10},
		M20: []float64{18461.2400600, 1.6279052448, 8433.4661576405, -6.4021295e-05, -4.9499477e-09, 2.0216731e-11, 1010.1671484, 3.9834598170, 16762.1575823656, 8.8291456e-05, 2.4546117e-07, -1.1661223e-09, 999.6936555, 0.7276493275, -104.7747329154, 2.1633405e-04, 2.5536106e-07, -1.2065558e-09, 623.6524746, 8.7690283983, 7109.2881325435, -2.1668263e-06, 6.8896872e-08, -3.2894608e-10,
			199.4837596, 9.6692843156, 15647.5290230993, -2.8252217e-04, -1.9141414e-07, 8.9782646e-10, 166.5741153, 6.4134738261, -1219.4032921817, -1.5447958e-04, -1.8151424e-07, 8.5739300e-10, 117.2606951, 12.0248388879, 23976.2204478244, -1.3020942e-04, 5.8996977e-08, -2.8851262e-10, 61.9119504, 6.3390143893, 25090.8490070907, 2.4060421e-04, 4.9587228e-07, -2.3524614e-09,
			33.3572027, 11.1245829706, 15437.9795572686, 1.5014592e-04, 3.1930799e-07, -1.5152852e-09, 31.7596709, 3.0832038997, 8223.9166918098, 3.6864680e-04, 5.0577218e-07, -2.3928949e-09, 29.5766003, 8.8121540801, 6480.9861772950, 4.9705523e-07, 6.8280480e-08, -2.7450635e-10, 15.5662654, 4.0579192538, -9548.0947169068, -3.0679233e-04, -4.3192536e-07, 2.0437321e-09,
			15.1215543, 14.3803934601, 32304.9118725496, 2.2103334e-05, 3.0940809e-07, -1.4748517e-09, -12.0941511, 8.7259027166, 7737.5900877920, -4.8307078e-06, 6.9513264e-08, -3.8338581e-10, 8.8681426, 9.7124099974, 15019.2270678508, -2.7985829e-04, -1.9203053e-07, 9.5226618e-10, 8.0450400, 0.6687636586, 8399.7091105030, -3.3191993e-05, 3.2017096e-08, -1.5363746e-10,
			7.9585542, 12.0679645696, 23347.9184925760, -1.2754553e-04, 5.8380585e-08, -2.3407289e-10, 7.4345550, 6.4565995078, -1847.7052474301, -1.5181570e-04, -1.8213063e-07, 9.1183272e-10, -6.7314363, -4.0265854988, -16133.8556271171, -9.0955337e-05, -2.4484477e-07, 1.1116826e-09, 6.5795750, 16.8104074692, 14323.3509980023, -2.2066770e-04, -1.1756732e-07, 5.4866364e-10,
			-6.4600721, 1.5847795630, 9061.7681128890, -6.6685176e-05, -4.3335556e-09, -3.4222998e-11, -6.2964773, 4.8837157343, 25300.3984729215, -1.9206388e-04, -1.4849843e-08, 6.0650192e-11, -5.6323538, -0.7707750092, 733.0766881638, -2.1899793e-04, -2.5474467e-07, 1.1521161e-09, -5.3683961, 6.8263720663, 16204.8433027325, -9.7115356e-05, 2.7023515e-08, -1.3414795e-10,
			-5.3112784, 3.9403341353, 17390.4595376141, 8.5627574e-05, 2.4607756e-07, -1.2205621e-09, -5.0759179, 0.6845236457, 523.5272223331, 2.1367016e-04, 2.5597745e-07, -1.2609955e-09, -4.8396143, -1.6710309265, -7805.1642023920, 6.1357413e-05, 5.5663398e-09, -7.4656459e-11, -4.8057401, 3.5705615768, -662.0890125485, 3.0927234e-05, 3.6923410e-08, -1.7458141e-10,
			3.9840545, 8.6945689615, 33419.5404318159, 3.9291696e-04, 7.4628340e-07, -3.5388005e-09, 3.6744619, 19.1659620415, 22652.0424227274, -6.8354947e-05, 1.3284380e-07, -6.3767543e-10, 2.9984815, 20.0662179587, 31190.2833132833, -3.4871029e-04, -1.2746721e-07, 5.8909710e-10, 2.7986413, -2.5281611620, -16971.7070481963, 3.4437664e-04, 2.6526096e-07, -1.2469893e-09,
			2.4138774, 17.7106633865, 22861.5918885581, -5.0102304e-04, -3.7787833e-07, 1.7754362e-09, 2.1863132, 5.5132179088, -9757.6441827375, 1.2587576e-04, 7.8796768e-08, -3.6937954e-10, 2.1461692, 13.4801375428, 23766.6709819937, 3.0245868e-04, 5.6971910e-07, -2.7016242e-09, 1.7659832, 11.1677086523, 14809.6776020201, 1.5280981e-04, 3.1869159e-07, -1.4608454e-09,
			-1.6244212, 7.3137297434, 7318.8375983742, -4.3483492e-04, -4.4182525e-07, 2.0841655e-09, 1.5813036, 5.4387584720, 16552.6081165349, 5.2095955e-04, 7.5618329e-07, -3.5792340e-09, 1.5197528, 16.7359480324, 40633.6032972747, 1.7441609e-04, 5.5981921e-07, -2.6611908e-09, 1.5156341, 1.7023646816, -17876.7861416319, -4.5910508e-04, -6.8233647e-07, 3.2300712e-09,
			1.5102092, 5.4977296450, 8399.6847301375, -3.3094061e-05, 3.1973462e-08, -1.5436468e-10, -1.3178223, 9.6261586339, 16275.8309783478, -2.8518605e-04, -1.9079775e-07, 8.4338673e-10, -1.2642739, 11.9817132061, 24604.5224030729, -1.3287330e-04, 5.9613369e-08, -3.4295235e-10, 1.1918723, 22.4217725310, 39518.9747380084, -1.9639754e-04, 1.2294390e-07, -5.9724197e-10,
			1.1346110, 14.4235191419, 31676.6099173011, 2.4767216e-05, 3.0879170e-07, -1.4204120e-09, 1.0857810, 8.8552797618, 5852.6842220465, 3.1609367e-06, 6.7664088e-08, -2.2006663e-10, -1.0193852, 7.2392703065, 33629.0898976466, -3.9751134e-05, 2.3556127e-07, -1.1256889e-09, -0.8227141, 11.0814572888, 16066.2815125171, 1.4748204e-04, 3.1992438e-07, -1.5697249e-09,
			0.8042238, 3.5274358950, -33.7870573000, 2.8263353e-05, 3.7539802e-08, -2.2902113e-10, 0.8025939, 6.7832463846, 16833.1452579809, -9.9779237e-05, 2.7639907e-08, -1.8858767e-10, -0.7931866, -6.3821400710, -24462.5470518423, -2.4326809e-04, -4.9525589e-07, 2.2980217e-09, -0.7910153, 6.3703481443, -591.1013369332, -1.5714346e-04, -1.8089785e-07, 8.0295327e-10,
			-0.6674056, 9.1819266386, 24533.5347274576, 5.5197395e-05, 2.7743463e-07, -1.3204870e-09, 0.6502226, 4.1010449356, -10176.3966721553, -3.0412845e-04, -4.3254175e-07, 2.0981718e-09, -0.6388131, 6.2958887075, 25719.1509623392, 2.3794032e-04, 4.9648867e-07, -2.4069012e-09},
		M21: []float64{0.0743000, 11.9537467337, 6480.9861772950, 4.9705523e-07, 6.8280480e-08, -2.7450635e-10, 0.0304300, 8.7259027166, 7737.5900877920, -4.8307078e-06, 6.9513264e-08, -3.8338581e-10, 0.0222900, 12.8540026510, 15019.2270678508, -2.7985829e-04, -1.9203053e-07, 9.5226618e-10, 0.0199900, 15.2095572232, 23347.9184925760, -1.2754553e-04, 5.8380585e-08, -2.3407289e-10,
			0.0186900, 9.5981921614, -1847.7052474301, -1.5181570e-04, -1.8213063e-07, 9.1183272e-10, 0.0169600, 7.1681781524, 16133.8556271171, 9.0955337e-05, 2.4484477e-07, -1.1116826e-09, 0.0162300, 1.5847795630, 9061.7681128890, -6.6685176e-05, -4.3335556e-09, -3.4222998e-11, 0.0141900, -0.7707750092, 733.0766881638, -2.1899793e-04, -2.5474467e-07, 1.1521161e-09},
		M30: []float64{385000.5290396, 1.5707963268, 0.0000000000, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, -20905.3551378, 3.9263508990, 8328.6914247251, 1.5231275e-04, 2.5041111e-07, -1.1863391e-09, -3699.1109330, 9.6121753977, 7214.0628654588, -2.1850087e-04, -1.8646419e-07, 8.7760973e-10, -2955.9675626, 11.9677299699, 15542.7542901840, -6.6188121e-05, 6.3946925e-08, -3.0872935e-10,
			-569.9251264, 6.2819054713, 16657.3828494503, 3.0462550e-04, 5.0082223e-07, -2.3726782e-09, 246.1584797, 7.2566208254, -1114.6285592663, -3.7081362e-04, -4.3687530e-07, 2.0639488e-09, -204.5861179, 12.0108556517, 14914.4523349355, -6.3524240e-05, 6.3330532e-08, -2.5428962e-10, -170.7330791, 14.3232845422, 23871.4457149091, 8.6124629e-05, 3.1435804e-07, -1.4950684e-09,
			-152.1378118, 9.6553010794, 6585.7609102104, -2.1583699e-04, -1.8708058e-07, 9.3204945e-10, -129.6202242, -0.8278839272, -7700.3894694766, -1.5497663e-04, -2.4979472e-07, 1.1318993e-09, 108.7427014, 6.7692631483, 7771.3771450920, -3.3094061e-05, 3.1973462e-08, -1.5436468e-10, 104.7552944, 3.8832252173, 8956.9933799736, 1.4964887e-04, 2.5102751e-07, -1.2407788e-09,
			79.6605685, 0.6705404095, -8538.2408905558, 2.8035534e-04, 2.6031101e-07, -1.2267725e-09, 48.8883284, 1.5276706450, 628.3019552485, -2.6638815e-06, 6.1639211e-10, -5.4439728e-11, -34.7825237, 20.0091090408, 22756.8171556428, -2.8468899e-04, -1.2251727e-07, 5.6888037e-10, 30.8238599, 11.9246042882, 16171.0562454324, -6.8852003e-05, 6.4563317e-08, -3.6316908e-10,
			24.2084985, 9.5690497159, 7842.3648207073, -2.2116475e-04, -1.8584780e-07, 8.2317000e-10, -23.2104305, 8.6374600436, 24986.0742741754, 4.5693825e-04, 7.5123334e-07, -3.5590172e-09, -21.6363439, 17.6535544685, 14428.1257309177, -4.3700174e-04, -3.7292838e-07, 1.7552195e-09, -16.6747239, 6.7261374666, 8399.6791003405, -3.5757942e-05, 3.2589854e-08, -2.0880440e-10,
			14.4026890, 4.9010662531, -9443.3199839914, -5.2312637e-04, -6.8728642e-07, 3.2502879e-09, -12.8314035, 14.3664102239, 23243.1437596606, 8.8788511e-05, 3.1374165e-07, -1.4406287e-09, -11.6499478, 22.3646636130, 31085.5085803679, -1.3237624e-04, 1.2789385e-07, -6.1745870e-10, -10.4447578, 16.6788391144, 32200.1371396342, 2.3843738e-04, 5.6476915e-07, -2.6814075e-09,
			10.3211071, 8.7119194804, -1324.1780250970, 6.1854469e-05, 7.3846820e-08, -3.4916281e-10, 10.0562033, 7.2997465071, -1742.9305145148, -3.6814974e-04, -4.3749170e-07, 2.1183885e-09, -9.8844667, 12.0539813334, 14286.1503796870, -6.0860358e-05, 6.2714140e-08, -1.9984990e-10, 8.7515625, 6.3563649081, -9652.8694498221, -9.0458282e-05, -1.7656429e-07, 8.3717626e-10,
			-8.3791067, 4.4137085761, -557.3142796331, -1.8540681e-04, -2.1843765e-07, 1.0319744e-09, -7.0026961, -3.1834384995, -16029.0808942018, -3.0728938e-04, -5.0020584e-07, 2.3182384e-09, 6.3220032, 9.1248177206, 16100.0685698171, 1.1921869e-04, 2.8238458e-07, -1.3407038e-09, 5.7508579, 6.2387797896, 17285.6848046987, 3.0196162e-04, 5.0143862e-07, -2.4271179e-09,
			-4.9501349, 9.6984267611, 5957.4589549619, -2.1317311e-04, -1.8769697e-07, 9.8648918e-10, -4.4211770, 3.0260949818, -209.5494658307, 4.3266809e-04, 5.1072212e-07, -2.4131116e-09, 4.1311145, 11.0674740526, 7004.5133996281, 2.1416722e-04, 3.2425793e-07, -1.5355019e-09, -3.9579827, 20.0522347225, 22128.5152003943, -2.8202511e-04, -1.2313366e-07, 6.2332010e-10,
			3.2582371, 14.8106422192, 14985.4400105508, -2.5159493e-04, -1.5449073e-07, 7.2324505e-10, -3.1483020, 4.8266068163, 16866.9323152810, -1.2804259e-04, -9.8998954e-09, 4.0433461e-11, 2.6164092, 14.2801588604, 24499.7476701576, 8.3460748e-05, 3.1497443e-07, -1.5495082e-09, 2.3536310, 9.5259240342, 8470.6667759558, -2.2382863e-04, -1.8523141e-07, 7.6873027e-10,
			-2.1171283, -0.8710096090, -7072.0875142282, -1.5764051e-04, -2.4917833e-07, 1.0774596e-09, -1.8970368, 17.6966801503, 13799.8237756692, -4.3433786e-04, -3.7354477e-07, 1.8096592e-09, -1.7385258, 2.0581540038, -8886.0057043583, -3.3771956e-04, -4.6884877e-07, 2.2183135e-09, -1.5713944, 22.4077892948, 30457.2066251194, -1.2971236e-04, 1.2727746e-07, -5.6301898e-10,
			-1.4225541, 24.7202181853, 39414.2000050930, 1.9936508e-05, 3.7830496e-07, -1.8037978e-09, -1.4189284, 17.1661967915, 23314.1314352759, -9.9282182e-05, 9.5920387e-08, -4.6309403e-10, 1.1655364, 3.8400995356, 9585.2953352221, 1.4698499e-04, 2.5164390e-07, -1.2952185e-09, -1.1169371, 10.9930146158, 33314.7656989005, 6.0925100e-04, 1.0016445e-06, -4.7453563e-09,
			1.0656723, 1.4845449633, 1256.6039104970, -5.3277630e-06, 1.2327842e-09, -1.0887946e-10, 1.0586190, 11.9220903668, 8364.7398411275, -2.1850087e-04, -1.8646419e-07, 8.7760973e-10, -0.9333176, 9.0816920389, 16728.3705250656, 1.1655481e-04, 2.8300097e-07, -1.3951435e-09, 0.8624328, 12.4550876470, 6656.7485858257, -4.0390768e-04, -4.0490184e-07, 1.9095841e-09,
			0.8512404, 4.3705828944, 70.9876756153, -1.8807069e-04, -2.1782126e-07, 9.7753467e-10, -0.8488018, 16.7219647962, 31571.8351843857, 2.4110126e-04, 5.6415276e-07, -2.6269678e-09, -0.7956264, 3.5134526588, -9095.5551701890, 9.4948529e-05, 4.1873358e-08, -1.9479814e-10},
		M31: []float64{0.5139500, 12.0108556517, 14914.4523349355, -6.3524240e-05, 6.3330532e-08, -2.5428962e-10, 0.3824500, 9.6553010794, 6585.7609102104, -2.1583699e-04, -1.8708058e-07, 9.3204945e-10, 0.3265400, 3.9694765808, 7700.3894694766, 1.5497663e-04, 2.4979472e-07, -1.1318993e-09, 0.2639600, 0.7416325637, 8956.9933799736, 1.4964887e-04, 2.5102751e-07, -1.2407788e-09,
			0.1230200, -1.6139220085, 628.3019552485, -2.6638815e-06, 6.1639211e-10, -5.4439728e-11, 0.0775400, 8.7830116346, 16171.0562454324, -6.8852003e-05, 6.4563317e-08, -3.6316908e-10, 0.0606800, 6.4274570623, 7842.3648207073, -2.2116475e-04, -1.8584780e-07, 8.2317000e-10, 0.0497000, 12.0539813334, 14286.1503796870, -6.0860358e-05, 6.2714140e-08, -1.9984990e-10},
		M1n: []float64{3.81034392032, 8.39968473021e+03, -3.31919929753e-05, //月球平黄经系数
			3.20170955005e-08, -1.53637455544e-10},
		PreceB:  []float64{0, 50287.92262, 111.24406, 0.07699, -0.23479, -0.00178, 0.00018, 0.00001},
		YueMing: [12]string{"正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "冬", "腊"},
		JiaZhi: []string{
			"甲子", "乙丑", "丙寅", "丁卯", "戊辰", "己巳", "庚午", "辛未", "壬申", "癸酉",
			"甲戌", "乙亥", "丙子", "丁丑", "戊寅", "己卯", "庚辰", "辛巳", "壬午", "癸未",
			"甲申", "乙酉", "丙戌", "丁亥", "戊子", "己丑", "庚寅", "辛卯", "壬辰", "癸巳",
			"甲午", "乙未", "丙申", "丁酉", "戊戌", "己亥", "庚子", "辛丑", "壬寅", "癸卯",
			"甲辰", "乙巳", "丙午", "丁未", "戊申", "己酉", "庚戌", "辛亥", "壬子", "癸丑",
			"甲寅", "乙卯", "丙辰", "丁巳", "戊午", "己未", "庚申", "辛酉", "壬戌", "癸亥",
		},
		MonthBaseData: []int{0, 31, -1, 30, 0, 31, 1, 32, 3, 33, 4, 34},
	}
}

func (b *BaZhi) DeltaT(yy, mm float64) float64 {
	var u, t, dt, y float64
	y = yy + (mm-0.5)/12

	if y <= -500 {
		u = (y - 1820) / 100
		dt = -20 + 32*u*u
	} else {
		if y < 500 {
			u = y / 100
			dt = 10583.6 - 1014.41*u + 33.78311*u*u - 5.952053*u*u*u - 0.1798452*u*u*u*u + 0.022174192*u*u*u*u*u + 0.0090316521*u*u*u*u*u*u
		} else {
			if y < 1600 {
				u = (y - 1000) / 100
				dt = 1574.2 - 556.01*u + 71.23472*u*u + 0.319781*u*u*u - 0.8503463*u*u*u*u - 0.005050998*u*u*u*u*u + 0.0083572073*u*u*u*u*u*u
			} else {
				if y < 1700 {
					t = y - 1600
					dt = 120 - 0.9808*t - 0.01532*t*t + t*t*t/7129
				} else {
					if y < 1800 {
						t = y - 1700
						dt = 8.83 + 0.1603*t - 0.0059285*t*t + 0.00013336*t*t*t - t*t*t*t/1174000
					} else {
						if y < 1860 {
							t = y - 1800
							dt = 13.72 - 0.332447*t + 0.0068612*t*t + 0.0041116*t*t*t - 0.00037436*t*t*t*t + 0.0000121272*t*t*t*t*t - 0.0000001699*t*t*t*t*t*t + 0.000000000875*t*t*t*t*t*t*t
						} else {
							if y < 1900 {
								t = y - 1860
								dt = 7.62 + 0.5737*t - 0.251754*t*t + 0.01680668*t*t*t - 0.0004473624*t*t*t*t + t*t*t*t*t/233174
							} else {
								if y < 1920 {
									t = y - 1900
									dt = -2.79 + 1.494119*t - 0.0598939*t*t + 0.0061966*t*t*t - 0.000197*t*t*t*t
								} else {
									if y < 1941 {
										t = y - 1920
										dt = 21.2 + 0.84493*t - 0.0761*t*t + 0.0020936*t*t*t
									} else {
										if y < 1961 {
											t = y - 1950
											dt = 29.07 + 0.407*t - t*t/233 + t*t*t/2547
										} else {
											if y < 1986 {
												t = y - 1975
												dt = 45.45 + 1.067*t - t*t/260 - t*t*t/718
											} else {
												if y < 2005 {
													t = y - 2000
													dt = 63.86 + 0.3345*t - 0.060374*t*t + 0.0017275*t*t*t + 0.000651814*t*t*t*t + 0.00002373599*t*t*t*t*t
												} else {
													if y < 2050 {
														t = y - 2000
														dt = 62.92 + 0.32217*t + 0.005589*t*t
													} else {
														if y < 2150 {
															u = (y - 1820) / 100
															dt = -20 + 32*u*u - 0.5628*(2150-y)
														} else {
															u = (y - 1820) / 100
															dt = -20 + 32*u*u
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	if y < 1955 || y >= 2005 {
		dt = dt - (0.000012932 * (y - 1955) * (y - 1955))
	}
	var DeltaT = dt / 60 //將秒轉換為分
	return DeltaT
}

//获取指定年的春分开始的24节气,另外多取2个确保覆盖完一个公历年
// 大致原理是:先用此方法得到理论值,再用摄动值(Perturbation)和固定参数DeltaT做调整
func (b *BaZhi) MeanJQJD(yy float64) []float64 {
	return b.getJieQi(yy, 26)
}

func (b *BaZhi) getJieQi(y float64, num int) []float64 {
	jq := make([]float64, num)

	t1 := 365.2422 * (y - 2000) // 农历年首始于前一年的冬至,为了节气中气一起算,取前年大雪之前
	for i := 0; i < num; i++ {
		// 计算节气(从冬至开始),注意:返回的是力学时
		jq[i] = b.jiaoCal(t1+(float64(i)*15.22), float64(i*15), 0) // 顺便计算节气,它不是农历定朔计算所必需的
		jq[i] = jq[i] + b.J2000 + 8/24.0                           // 计算第i个节气(i=0是春分),结果转为北京时

	}
	return jq
}

func (b *BaZhi) GetFirstJq(y float64) float64 {
	jq := make([]float64, 22)

	y = y - 1
	t1 := 365.2422 * (y - 2000.0) // 农历年首始于前一年的冬至,为了节气中气一起算,取前年大雪之前
	i := 21
	// 计算节气(从冬至开始),注意:返回的是力学时
	jq[i] = b.jiaoCal(t1+(float64(i)*15.22), float64(i*15), 0) // 顺便计算节气,它不是农历定朔计算所必需的

	jq[i] = jq[i] + b.J2000 + 8/24.0 // 计算第i个节气(i=0是春分),结果转为北京时

	return jq[i]
}

//获取指定年的春分开始作Perturbaton調整後的24节气,可以多取2个
func (b *BaZhi) GetAdjustedJQ(yy, start, end float64) []float64 {
	if start < 0 || start > 25 {
		return nil
	}
	if end < 0 || end > 25 {
		return nil
	}
	var jqjd = b.MeanJQJD(yy) //获取该年春分开始的24节气时间点

	var jq = make([]float64, int(end)+1)

	for k := 0; k < len(jqjd); k++ {
		if k < int(start) {
			continue
		}
		if k > int(end) {
			continue
		}
		//jq = append(jq, jqjd[k])
		jq[k] = jqjd[k]
	}

	return jq
}

//求出以某年立春點開始的節(注意:为了方便计算起运数,此处第0位为上一年的小寒)
func (b *BaZhi) GetPureJQsinceSpring(yy float64) []float64 {
	jdpjq := make([]float64, 0)

	var dj = b.GetAdjustedJQ(yy-1, 19, 23) //求出含指定年立春開始之3個節氣JD值,以前一年的年值代入

	var k int

	for k = 0; k < len(dj); k++ {
		if k < 19 {
			continue
		}
		if k > 23 {
			continue
		}
		if k%2 == 0 {
			continue
		}

		jdpjq = append(jdpjq, dj[k])
		//jdpjq[len(jdpjq)] = dj[k] //19小寒;20大寒;21立春;22雨水;23惊蛰
	}

	dj = b.GetAdjustedJQ(yy, 0, 25) //求出指定年節氣之JD值,從春分開始,到大寒,多取两个确保覆盖一个公历年,也方便计算起运数

	for zz := 0; zz < len(dj); zz++ {

		if zz%2 == 0 {
			continue
		}

		jdpjq = append(jdpjq, dj[zz])
		//jdpjq[len(jdpjq)] = dj[zz]
	}
	rsp := jdpjq
	return rsp
}

//求出自冬至點為起點的連續15個中氣
func (b *BaZhi) GetZQsinceWinterSolstice(yy float64) []float64 {
	jdzq := make([]float64, 24)

	dj := b.GetAdjustedJQ(yy-1, 18, 23) //求出指定年冬至開始之節氣JD值,以前一年的值代入
	jdzq[0] = dj[18]                    //冬至
	jdzq[1] = dj[20]                    //大寒
	jdzq[2] = dj[22]                    //雨水

	dj = b.GetAdjustedJQ(yy, 0, 23) //求出指定年節氣之JD值
	for k := 0; k < len(dj); k++ {

		if k%2 != 0 {
			continue
		}
		jdzq[len(jdzq)] = dj[k]
	}

	return jdzq
}

// 求出實際新月點
// 以2000年初的第一個均值新月點為0點求出的均值新月點和其朔望月之序數 k 代入此副程式來求算實際新月點
func (b *BaZhi) TrueNewMoon(k float64) float64 {
	var jdt, t, t2, t3, t4, pt, m, mprime, f, omega, es, apt1, apt2 float64
	jdt = 2451550.09765 + k*b.SynMonth
	t = (jdt - 2451545) / 36525 //2451545為2000年1月1日正午12時的JD
	t2 = t * t                  //square for frequent use
	t3 = t2 * t                 //cube for frequent use
	t4 = t3 * t                 //to the fourth
	//mean time of phase
	pt = jdt + 0.0001337*t2 - 0.00000015*t3 + 0.00000000073*t4
	//Sun's mean anomaly(地球繞太阳运行均值近點角)(從太阳觀察)
	m = 2.5534 + 29.10535669*k - 0.0000218*t2 - 0.00000011*t3
	//Moon's mean anomaly(月球繞地球运行均值近點角)(從地球觀察)
	mprime = 201.5643 + 385.81693528*k + 0.0107438*t2 + 0.00001239*t3 - 0.000000058*t4
	//Moon's argument of latitude(月球的緯度參數)
	f = 160.7108 + 390.67050274*k - 0.0016341*t2 - 0.00000227*t3 + 0.000000011*t4
	//Longitude of the ascending node of the lunar orbit(月球繞日运行軌道升交點之經度)
	omega = 124.7746 - 1.5637558*k + 0.0020691*t2 + 0.00000215*t3
	//乘式因子
	es = 1 - 0.002516*t - 0.0000074*t2
	//因perturbation造成的偏移：
	apt1 = -0.4072 * math.Sin((math.Pi/180)*mprime)
	apt1 += 0.17241 * es * math.Sin((math.Pi/180)*m)
	apt1 += 0.01608 * math.Sin((math.Pi/180)*2*mprime)
	apt1 += 0.01039 * math.Sin((math.Pi/180)*2*f)
	apt1 += 0.00739 * es * math.Sin((math.Pi/180)*(mprime-m))
	apt1 -= 0.00514 * es * math.Sin((math.Pi/180)*(mprime+m))
	apt1 += 0.00208 * es * es * math.Sin((math.Pi/180)*(2*m))
	apt1 -= 0.00111 * math.Sin((math.Pi/180)*(mprime-2*f))
	apt1 -= 0.00057 * math.Sin((math.Pi/180)*(mprime+2*f))
	apt1 += 0.00056 * es * math.Sin((math.Pi/180)*(2*mprime+m))
	apt1 -= 0.00042 * math.Sin((math.Pi/180)*3*mprime)
	apt1 += 0.00042 * es * math.Sin((math.Pi/180)*(m+2*f))
	apt1 += 0.00038 * es * math.Sin((math.Pi/180)*(m-2*f))
	apt1 -= 0.00024 * es * math.Sin((math.Pi/180)*(2*mprime-m))
	apt1 -= 0.00017 * math.Sin((math.Pi/180)*omega)
	apt1 -= 0.00007 * math.Sin((math.Pi/180)*(mprime+2*m))
	apt1 += 0.00004 * math.Sin((math.Pi/180)*(2*mprime-2*f))
	apt1 += 0.00004 * math.Sin((math.Pi/180)*(3*m))
	apt1 += 0.00003 * math.Sin((math.Pi/180)*(mprime+m-2*f))
	apt1 += 0.00003 * math.Sin((math.Pi/180)*(2*mprime+2*f))
	apt1 -= 0.00003 * math.Sin((math.Pi/180)*(mprime+m+2*f))
	apt1 += 0.00003 * math.Sin((math.Pi/180)*(mprime-m+2*f))
	apt1 -= 0.00002 * math.Sin((math.Pi/180)*(mprime-m-2*f))
	apt1 -= 0.00002 * math.Sin((math.Pi/180)*(3*mprime+m))
	apt1 += 0.00002 * math.Sin((math.Pi/180)*(4*mprime))

	apt2 = 0.000325 * math.Sin((math.Pi/180)*(299.77+0.107408*k-0.009173*t2))
	apt2 += 0.000165 * math.Sin((math.Pi/180)*(251.88+0.016321*k))
	apt2 += 0.000164 * math.Sin((math.Pi/180)*(251.83+26.651886*k))
	apt2 += 0.000126 * math.Sin((math.Pi/180)*(349.42+36.412478*k))
	apt2 += 0.00011 * math.Sin((math.Pi/180)*(84.66+18.206239*k))
	apt2 += 0.000062 * math.Sin((math.Pi/180)*(141.74+53.303771*k))
	apt2 += 0.00006 * math.Sin((math.Pi/180)*(207.14+2.453732*k))
	apt2 += 0.000056 * math.Sin((math.Pi/180)*(154.84+7.30686*k))
	apt2 += 0.000047 * math.Sin((math.Pi/180)*(34.52+27.261239*k))
	apt2 += 0.000042 * math.Sin((math.Pi/180)*(207.19+0.121824*k))
	apt2 += 0.00004 * math.Sin((math.Pi/180)*(291.34+1.844379*k))
	apt2 += 0.000037 * math.Sin((math.Pi/180)*(161.72+24.198154*k))
	apt2 += 0.000035 * math.Sin((math.Pi/180)*(239.56+25.513099*k))
	apt2 += 0.000023 * math.Sin((math.Pi/180)*(331.55+3.592518*k))
	return pt + apt1 + apt2
}

//對於指定日期時刻所屬的朔望月,求出其均值新月點的月序數
func (b *BaZhi) MeanNewMoon(jd float64) []float64 {
	var kn, jdt, t, thejd float64
	//$kn為從2000年1月6日14時20分36秒起至指定年月日之阴曆月數,以synodic month為單位
	kn = math.Floor((jd - 2451550.09765) / b.SynMonth) //2451550.09765為2000年1月6日14時20分36秒之JD值.
	jdt = 2451550.09765 + kn*b.SynMonth
	//Time in Julian centuries from 2000 January 0.5.
	t = (jdt - 2451545) / 36525 //以100年為單位,以2000年1月1日12時為0點
	thejd = jdt + 0.0001337*t*t - 0.00000015*t*t*t + 0.00000000073*t*t*t*t
	//2451550.09765為2000年1月6日14時20分36秒,此為2000年後的第一個均值新月
	return []float64{kn, thejd}
}

//将儒略日历时间转换为公历(格里高利历)时间
func (b *BaZhi) Julian2Solar(jd float64, utc bool) []int {
	var y4h, init, jdr, yh, cen, ywl, jy, d, ml, mp, y, m, sd, mt, ss, hh, yy, mm, dd float64
	if utc == false {
		jd -= b.deltatT2(jd - b.J2000)
	}

	if jd >= 2299160.5 { //1582年10月15日,此日起是儒略日历,之前是儒略历
		y4h = 146097
		init = 1721119.5
	} else {
		y4h = 146100
		init = 1721117.5
	}
	jdr = math.Floor(jd - init)
	yh = y4h / 4.0
	cen = math.Floor((jdr + 0.75) / yh)
	d = math.Floor(jdr + 0.75 - cen*yh)
	ywl = 1461 / 4.0
	jy = math.Floor((d + 0.75) / ywl)
	d = math.Floor(d + 0.75 - ywl*jy + 1)
	ml = 153 / 5.0
	mp = math.Floor((d - 0.5) / ml)
	d = math.Floor((d - 0.5) - 30.6*mp + 1)
	y = (100 * cen) + jy
	m = math.Mod(mp+2, 12) + 1
	if m < 3 {
		y = y + 1
	}
	sd = math.Floor((jd+0.5-math.Floor(jd+0.5))*24*60*60 + 0.00005)
	mt = math.Floor(sd / 60.0)
	ss = math.Mod(sd, 60)
	hh = math.Floor(mt / 60.0)
	mt = math.Mod(mt, 60)
	yy = math.Floor(y)
	mm = math.Floor(m)
	dd = math.Floor(d)

	return []int{int(yy), int(mm), int(dd), int(hh), int(mt), int(ss)}
}

//以比較日期法求算冬月及其餘各月名稱代碼,包含閏月,冬月為0,臘月為1,正月為2,餘類推.閏月多加0.5
func (b *BaZhi) GetZQandSMandLunarMonthCode(yy float64) [][]float64 {

	jdzq := make([]float64, 24)
	mc := make([]float64, 23)
	jdnm := make([]float64, 23)

	jdzq = b.GetZQsinceWinterSolstice(yy)                     //取得以前一年冬至為起點之連續15個中氣
	jdnm = b.GetSMsinceWinterSolstice(yy, jdzq[0])            //求出以含冬至中氣為阴曆11月(冬月)開始的連續16個朔望月的新月點
	yz := 0.0                                                 //設定旗標,0表示未遇到閏月,1表示已遇到閏月
	if math.Floor(jdzq[12]+0.5) >= math.Floor(jdnm[13]+0.5) { //若第13個中氣jdzq(12)大於或等於第14個新月jdnm(13)
		for i := 1; i <= 14; i++ { //表示此兩個冬至之間的11個中氣要放到12個朔望月中,
			//至少有一個朔望月不含中氣,第一個不含中氣的月即為閏月
			//若阴曆臘月起始日大於冬至中氣日,且阴曆正月起始日小於或等於大寒中氣日,則此月為閏月,其餘同理
			if (jdnm[i]+0.5) > math.Floor(jdzq[i-1-int(yz)]+0.5) && math.Floor(jdnm[i+1]+0.5) <= math.Floor(jdzq[i-int(yz)]+0.5) {
				mc[i] = float64(i) - 0.5
				yz = 1 //標示遇到閏月
			} else {
				mc[i] = float64(i) - yz //遇到閏月開始,每個月號要減1
			}
		}
	} else {                       //否則表示兩個連續冬至之間只有11個整月,故無閏月
		for i := 0; i <= 12; i++ { //直接賦予這12個月月代碼
			mc[i] = float64(i)
		}
		for i := 13; i <= 14; i++ { //處理次一置月年的11月與12月,亦有可能含閏月
			//若次一阴曆臘月起始日大於附近的冬至中氣日,且阴曆正月起始日小於或等於大寒中氣日,則此月為閏月,次一正月同理.
			if (jdnm[i]+0.5) > math.Floor(jdzq[i-1-int(yz)]+0.5) && math.Floor(jdnm[i+1]+0.5) <= math.Floor(jdzq[i-int(yz)]+0.5) {
				mc[i] = float64(i) - 0.5
				yz = 1 //標示遇到閏月
			} else {
				mc[i] = float64(i) - yz //遇到閏月開始,每個月號要減1
			}
		}
	}
	return [][]float64{jdzq, jdnm, mc}
}

//求算以含冬至中氣為阴曆11月開始的連續16個朔望月
//loat $jdws 冬至的儒略日历时间  $yy 年份
func (b *BaZhi) GetSMsinceWinterSolstice(yy, jdws float64) []float64 {
	var jd, kn, k, j float64
	tjd := make([]float64, 24)
	arr := make([]float64, 24)

	jd = b.Solar2Julian(yy-1, 11, 1, 0, 0, 0) //求年初前兩個月附近的新月點(即前一年的11月初)

	arr = b.MeanNewMoon(jd) //求得自2000年1月起第kn個平均朔望日及其JD值
	kn = arr[0]
	//thejd = arr[1]

	for i := 0; i <= 19; i++ { //求出連續20個朔望月
		k = kn + float64(i)
		//mjd = thejd + b.SynMonth*i
		tjd[i] = b.TrueNewMoon(k) + 1/3 //以k值代入求瞬時朔望日,因中國比格林威治先行8小時,加1/3天
		//下式為修正dynamical time to Universal time
		tjd[i] = tjd[i] - b.DeltaT(yy, float64(i-1))/1440 //1為1月,0為前一年12月,-1為前一年11月(當i=0時,i-1=-1,代表前一年11月)
	}
	for j = 0; j <= 18; j++ {
		if math.Floor(tjd[int(j)]+0.5) > math.Floor(jdws+0.5) {
			break
		} //已超過冬至中氣(比較日期法)
	}

	jdnm := make([]float64, 24)
	for k = 0; k <= 15; k++ { //取上一步的索引值
		jdnm[int(k)] = tjd[int(j-1+k)] //重排索引,使含冬至朔望月的索引為0
	}
	return jdnm
}

// 將公历时间转换为儒略日历时间 hh [0-23] mt [0-59] ss [0-59]
func (b *BaZhi) Solar2Julian(yy, mm, dd, hh, mt, ss float64) float64 {
	var yp, init, jdy, mp, jdm, jdd, jdh float64
	if !b.ValidDate(yy, mm, dd) {
		return 0
	}
	if hh < 0 || hh >= 24 {
		return 0
	}
	if mt < 0 || mt >= 60 {
		return 0
	}
	if ss < 0 || ss >= 60 {
		return 0
	}

	yp = yy + math.Floor((mm-3)/10)
	if (yy > 1582) || (yy == 1582 && mm > 10) || (yy == 1582 && mm == 10 && dd >= 15) { //这一年有十天是不存在的
		init = 1721119.5
		jdy = math.Floor(yp*365.25) - math.Floor(yp/100) + math.Floor(yp/400)
	}
	if (yy < 1582) || (yy == 1582 && mm < 10) || (yy == 1582 && mm == 10 && dd <= 4) {
		init = 1721117.5
		jdy = math.Floor(yp * 365.25)
	}
	if init <= 0 {
		return 0
	}
	mp = math.Mod(math.Floor(mm+9), 12)
	jdm = mp*30 + math.Floor((mp+1)*34/57)
	jdd = dd - 1
	jdh = (hh + (mt+(ss/60))/60) / 24
	return jdy + jdm + jdd + jdh + init
}

// 判断公历日期是否有效
func (b *BaZhi) ValidDate(yy, mm, dd float64) bool {
	var ndf1, ndf2, ndf, dom float64
	if yy < -1000 || yy > 3000 { //适用于西元-1000年至西元3000年,超出此范围误差较大
		return false
	}

	if mm < 1 || mm > 12 { //月份超出範圍
		return false
	}

	if yy == 1582 && mm == 10 && dd >= 5 && dd < 15 { //这段日期不存在.所以1582年10月只有20天
		return false
	}

	if math.Mod(yy, 4) == 0 {
		ndf1 = -1
	}

	tmp := 0
	if math.Mod(yy, 400) == 0 {
		tmp = 1
	}

	tmp1 := 0
	if math.Mod(yy, 100) == 0 {
		tmp1 = 1
	}

	tmp3 := 0
	if yy > 1582 {
		tmp3 = 1
	}

	tmp4 := 0
	if tmp-tmp1 > 0 {
		tmp4 = 1
	}

	if tmp4 == 1 && tmp3 == 1 {
		ndf2 = 1
	}

	tmp5 := 0.0
	if mm == 2 {
		tmp5 = 1
	}

	ndf = ndf1 + ndf2
	dom = 30.0 + (math.Mod(math.Abs(mm-7.5)+0.5, 2)) - (tmp5 * (2 + ndf))
	if dd <= 0 || dd > dom {
		if ndf == 0 && mm == 2 && dd == 29 { //此年無閏月

		} else { //日期超出範圍

		}
		return false
	}

	return true
}

// 算出:jd转到当地UTC后,UTC日数的整数部分或小数部分
// 基于J2000力学时jd的起算点是12:00:00时,所以跳日时刻发生在12:00:00,这与日历计算发生矛盾
// 把jd改正为00:00:00起算,这样儒略日的跳日动作就与日期的跳日同步
// 改正方法为jd=jd+0.5-deltatT+shiqu/24.0
// 把儒略日的起点移动-0.5(即前移12小时)
// 式中shiqu是时区,北京的起算点是-8小时,shiqu取8
func (b *BaZhi) DintDec(jd, shiqu float64, dec bool) float64 {
	var u = jd + 0.5 - b.deltatT2(jd) + shiqu/24.0
	if dec {
		return math.Floor(u) // 返回整数部分
	} else {
		return u - math.Floor(u) // 返回小数部分
	}
}

func (b *BaZhi) PaiYue(y float64) ([]map[string]int, []map[string]string) {
	num := 15
	zq := make([]float64, num)
	jq := make([]float64, num)
	hs := make([]float64, num)
	i := 0
	var t1 = 365.2422*(y-2000.0) - 50.0 // 农历年首始于前一年的冬至,为了节气中气一起算,取前年大雪之前

	for i := 0; i < num; i++ { // 计算节气(从冬至开始),注意:返回的是力学时
		zq[i] = b.jiaoCal(t1+(float64(i)*30.43685), (float64(i)*30)-90.0, 0)  // 中气计算,冬至的太阳黄经是270度(或-90度)
		jq[i] = b.jiaoCal(t1+(float64(i)*30.43685), (float64(i)*30)-105.0, 0) // 顺便计算节气,它不是农历定朔计算所必需的
	}

	//spew.Dump(zq)
	//spew.Dump(jq)
	// 在冬至过后,连续计算num个日月合朔时刻
	dongZhiJia1 := zq[0] + 1.0 - b.DintDec(zq[0], 8, false) // 冬至过后的第一天0点的儒略日数
	hs[0] = b.jiaoCal(dongZhiJia1, 0.0, 1.0)                // 首月结束的日月合朔时刻
	for i := 1; i < num; i++ {
		hs[i] = b.jiaoCal(hs[i-1]+25.0, 0.0, 1.0)
	}
	// 算出中气及合朔时刻的日数(不含小数的日数计数,以便计算日期之间的差值)

	// var A=new Array(), B=new Array(), C=new Array();
	A := make([]float64, 24)
	B := make([]float64, 24)
	C := make([]float64, 24)
	for i := 0; i < num; i++ { // 取当地UTC日数的整数部分
		A[i] = b.DintDec(zq[i], 8.0, true)
		B[i] = b.DintDec(jq[i], 8.0, true)
		C[i] = b.DintDec(hs[i], 8.0, true)
	}

	// 闰月及大小月分析
	tot := 12
	nun := -1
	yn := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0} // 月编号
	if C[12] <= A[12] {                                  // 闰月分析
		yn[12] = 12
		tot = 13 // 编号为12的月是本年的有效月份,本年总月数13个
		for i = 1; i < 13; i++ {
			if C[i] <= A[i] {
				break
			}
		}

		for nun = i - 1; i < 13; i++ {
			yn[i-1]-- // 注意yn中不含农历首月(所以取i-1),在公历中农历首月总是去年的所以不多做计算
		}
	}

	syn := make([]map[string]string, tot+1)
	for i := 0; i < tot; i++ {
		tmp2 := make(map[string]string)
		tmp2["name"] = b.YueMing[(yn[i]+10.0)%12] // 转建寅月名
		tmp2["m"] = strconv.Itoa((yn[i]+10.0)%12 + 1.0)
		msg := ""
		msg += tmp2["name"]
		if i == nun {
			tmp2["r"] = strconv.Itoa(1)
			msg += "闰"
		} else {
			tmp2["r"] = strconv.Itoa(0)
		}
		msg += "月"
		if C[i+1]-C[i] > 29 {
			tmp2["day"] = strconv.Itoa(30)
		} else {
			tmp2["day"] = strconv.Itoa(29)
		}

		tmp2["y"] = fmt.Sprintf("%d", int(y))
		tmp2["msg"] = msg
		if i == 0 {
			if atoi, err := strconv.Atoi(tmp2["y"]); err == nil {
				tmp2["y"] = fmt.Sprintf("%d", atoi-1)
			} else {
				//fmt.Println(atoi)
				panic(err)
			}
		}
		if syn[i] == nil {
			syn[i] = make(map[string]string)
		}
		syn[i] = tmp2
	}

	out := make([]map[string]int, tot)
	outInfo := make([]map[string]string, tot)
	for i := 0; i < tot; i++ {
		a := hs[i] + b.J2000 + 8/24.0
		utcTime := b.setFromJD(a, true)
		tmp := make(map[string]int)
		tmp["y"] = int(utcTime[0])
		tmp["m"] = int(utcTime[1])
		tmp["d"] = int(utcTime[2])
		//tmp["info"] = syn[i]
		//cstSh, _ := time.LoadLocation("Asia/Shanghai")

		timeLocation, _ := time.LoadLocation("Asia/Shanghai")
		dateU := time.Date(tmp["y"], time.Month(tmp["m"]), tmp["d"], 0, 0, 0, 0, timeLocation)

		tmp["utime"] = int(dateU.Unix() * 1000)

		//tmp2, _ := time.Parse("2006-1-2 15:04:05", fmt.Sprintf("%d-%d-%d 00:00:00", int(tmp["y"]), int(tmp["m"]), int(tmp["d"])))
		//tmp["utime"] = int(tmp2.Unix()) * 1000

		out[i] = tmp
		outInfo[i] = syn[i]
	}

	//fmt.Println(out,outInfo)
	return out, outInfo
}

//将公历时间转换成农历时间
func (b *BaZhi) Solar2Lunar(yy, mm, dd, hh, ii, ss float64) map[string]string {
	n1, n1f := b.PaiYue(yy - 1)
	n2, n2f := b.PaiYue(yy)
	n4, n4f := b.PaiYue(yy + 1)

	timeLocation, _ := time.LoadLocation("Asia/Shanghai")
	dateU := time.Date(int(yy), time.Month(int(mm)), int(dd), int(hh), int(ii), int(ss), 0, timeLocation)

	utime := int(dateU.Unix() * 1000)

	n3 := n1[:]
	n3f := n1f[:]

	for i := 0; i < 12; i++ {
		n3 = append(n3, n2[i])
		n3f = append(n3f, n2f[i])
		//n3[len(n3)] = n2[i]
		//n3f[len(n3)] = n2f[i]
	}

	for i := 0; i < 12; i++ {

		n3 = append(n3, n4[i])
		n3f = append(n3f, n4f[i])

		//n3[len(n3)] = n4[i]
		//n3f[len(n3)] = n4f[i]
	}

	num := len(n3)
	var i, wei int
	for i = 0; i < num; i++ {
		if utime >= n3[i]["utime"] && utime < n3[i+1]["utime"] {
			wei = i
			break
		}
	}

	//定位到了正确的时间点了 那么开始加了
	chaday := (utime - n3[wei]["utime"]) / 86400000 //相差这么多天
	chaday++                                        //每个月是1开始的 不是0
	newday := make(map[string]string, 24)
	if di, ok := strconv.Atoi(n3f[wei]["day"]); chaday > (di) && ok == nil {
		chaday = chaday - (di)
		wei++ //加一个月
	}

	newday["y"] = n3f[wei]["y"]
	newday["m"] = n3f[wei]["m"]
	newday["r"] = n3f[wei]["r"]
	newday["msg"] = n3f[wei]["msg"]
	newday["d"] = fmt.Sprintf("%d", chaday)
	return newday
}

//将农历时间转换成公历时间 // r 0男，1女
func (b *BaZhi) Lunar2Solar(yy, mm, dd, r int, isLeap ...bool) (map[string]int, error) {

	n2, n2f := b.PaiYue(float64(yy) - 1)
	n4, n4f := b.PaiYue(float64(yy))
	n5, n5f := b.PaiYue(float64(yy) + 1)

	n3 := n2
	n3f := n2f
	for i := 0; i < 12; i++ {
		n3 = append(n3, n4[i])
		n3f = append(n3f, n4f[i])
		//n3[i] = n4[i]
		//n3f[i] = n4f[i]
	}

	for i := 0; i < 12; i++ {
		n3 = append(n3, n5[i])
		n3f = append(n3f, n5f[i])
		//n3[i] = n5[i]
		//n3f[i] = n5f[i]
	}
	num := len(n3)

	var wei int
	for i := 0; i < num; i++ {
		var mi, yi, ri int
		var err error
		if mi, err = strconv.Atoi(n3f[i]["m"]); err != nil {
			return nil, err

		}
		if yi, err = strconv.Atoi(n3f[i]["y"]); err != nil {
			return nil, err
		}
		if ri, err = strconv.Atoi(n3f[i]["r"]); err != nil {
			return nil, err
		}

		if mi == mm && yi == yy && ri == r {
			wei = i
			break
		}
	}
	//定位到了正确的时间点了 那么开始加了
	var chaday = dd
	chaday-- //每个月是1开始的 不是0
	if len(isLeap) > 0 && isLeap[0] {
		wei = wei + 1
	}

	now := n3[wei]["utime"] + chaday*86400000
	_, newday := b.formatDate("ymd", now, false)

	//fmt.Println(n3[wei])
	return newday, nil
}

//四柱計算,分早子时晚子时,传公历
func (b *BaZhi) GetGanZhi(yy, mm, dd, hh, mt, ss, dtime float64) ([]string, []string, float64, []float64, int) {
	var ix int
	jd := b.Solar2Julian(yy, mm, dd, hh, mt, math.Max(1, ss))

	//fmt.Println("jd>>>>", jd)

	if jd < 0 {
		return nil, nil, 0, nil, 0
	}

	var tg = make([]string, 4)
	var dz = make([]string, 4)
	jq := b.GetPureJQsinceSpring(yy)
	if jd < jq[1] {
		yy = yy - 1
		jq = b.GetPureJQsinceSpring(yy)
	}
	ygz := math.Mod(math.Mod(yy+4712+24, 60.0)+60.0, 60.0)
	tg[0] = fmt.Sprintf("%f", math.Mod(ygz, 10.0)) //年干
	//tg = append(tg, fmt.Sprintf("%f", math.Mod(ygz, 10)))
	dz[0] = fmt.Sprintf("%f", math.Mod(ygz, 12.0)) //年支
	//dz = append(dz, fmt.Sprintf("%f", math.Mod(ygz, 12)))
	for j := 0; j <= 15; j++ {
		if jq[j] > jd {
			ix = j - 1
			break
		}
	}
	//五虎遁 算月

	tgf, err := strconv.ParseFloat(tg[0], 64)
	if err != nil {
		panic(err)
	}
	yue := b.getLiuNianSLiuYue(tgf)
	tg[1] = yue[ix-1]["g"]
	//tg = append(tg, yue[ix-1]["g"])
	dz[1] = yue[ix-1]["z"]
	//dz = append(dz, yue[ix-1]["z"])
	//高斯算法
	ri := b.getRizhuIndex(int(dtime))
	gi, _ := strconv.Atoi(ri["g"])
	tg[2] = fmt.Sprintf("%d", int(math.Mod(float64(gi), 10.0)))
	//tg = append(tg, fmt.Sprintf("%f", math.Mod(float64(gi), 10)))
	zi, _ := strconv.Atoi(ri["z"])
	dz[2] = fmt.Sprintf("%d", int(math.Mod(float64(zi), 12.0))) //日支
	//dz = append(dz, fmt.Sprintf("%f", math.Mod(float64(zi), 12)))

	if b.Zwz && hh >= 23 { //区分早晚子时,日柱前移一柱
		//tg = append(tg, fmt.Sprintf("%d", (int(math.Mod(float64(gi), 10))+10-1)%10))
		//dz = append(dz, fmt.Sprintf("%d", (int(math.Mod(float64(zi), 12))+12-1)%12))
		tg[2] = fmt.Sprintf("%d", (int(math.Mod(float64(gi), 10.0))+10.0-1.0)%10.0)
		dz[2] = fmt.Sprintf("%d", (int(math.Mod(float64(zi), 12.0))+12.0-1.0)%12.0)
	}
	tg2int, _ := strconv.Atoi(tg[2])
	shi := b.getLiuRISLiuShi(math.Mod(float64(tg2int), 10))
	var sv = make(map[string]string)
	for i := 0; i < len(shi); i++ {
		sv = shi[i]
		begi, err := strconv.Atoi(sv["beg"])
		if err != nil {
			panic(err)
		}
		endi, err := strconv.Atoi(sv["end"])
		if err != nil {
			panic(err)
		}

		if float64(begi) <= hh && float64(endi) > hh {
			gi, _ := strconv.ParseFloat(sv["g"], 64)
			zi, _ := strconv.ParseFloat(sv["z"], 64)
			tg[3] = fmt.Sprintf("%f", math.Mod(gi, 10)) //時干
			//tg = append(tg, fmt.Sprintf("%f", math.Mod(float64(gi), 10))) //時干
			dz[3] = fmt.Sprintf("%f", math.Mod(float64(zi), 12)) //時支
			//dz = append(dz, fmt.Sprintf("%f", math.Mod(float64(zi), 12))) //時支
			break
		}

	}
	return tg, dz, jd, jq, ix
}

func (b *BaZhi) getLiuRISLiuShi(Gan float64) []map[string]string {
	var zhi, tg, dz float64
	var start, end int
	GanArr := []int{0, 2, 4, 6, 8}
	//$monthGan = "丙戊庚壬甲";
	// 获得的位置对5求余来源于：甲己对应丙，乙庚对应戊，丙辛对应庚，丁壬对应壬，戊癸对应甲，以此类推
	BeginGan := int(math.Mod(Gan, 5))
	gan := GanArr[BeginGan]
	zhi = 0
	tmp := make([]map[string]string, 0)
	for i := 0; i < 13; i++ {

		tg = math.Mod(float64(gan), 10)
		gan++

		dz = math.Mod(zhi, 12)
		zhi++
		start = 2*i - 1

		end = 2*i + 1

		if start == -1 {
			start = 0
		}

		if end == 25 {
			end = 24
		}

		var tmp2 = make(map[string]string)
		tmp2["g"] = fmt.Sprintf("%f", tg)
		tmp2["z"] = fmt.Sprintf("%f", dz)
		tmp2["msg"] = b.Ctg[int(tg)] + b.Cdz[int(dz)]
		tmp2["beg"] = fmt.Sprintf("%d", start)
		tmp2["end"] = fmt.Sprintf("%d", end)

		tmp = append(tmp, tmp2)
		//tmp[len(tmp)] = tmp2

	}

	return tmp
}

func (b *BaZhi) getRizhuIndex(utime int) map[string]string {
	_, ymd := b.formatDate("ymd", utime, true)

	//tmp2, _ := time.Parse("2006/01/02 15:04:05", fmt.Sprintf("%f/%f/%f 00:00:00", tmp["y"], tmp["m"], tmp["d"]))
	date, _ := time.Parse("2006-1-2 15:03:04", fmt.Sprintf("%d-%d-%d 00:00:00", ymd["y"], ymd["m"], ymd["d"]))

	utime = int(date.Unix())

	date2, _ := time.Parse("2006/01/02 15:03:04", "2019/09/24 00:00:00")
	//var $date2 = new Date("2019/09/24");
	utime2 := int(date2.Unix())

	diff := utime - utime2

	chaday := diff / 86400
	r := math.Mod(float64(chaday), 60)
	if r < 0 {
		r += 60
	}
	arr := strings.Split(b.JiaZhi[int(r)], "")

	tmp := make(map[string]string)
	tmp["g"] = strconv.Itoa(b.getGanPosition(arr[0]))
	tmp["z"] = strconv.Itoa(b.getZhiPosition(arr[1]))
	tmp["msg"] = b.JiaZhi[int(r)]
	return tmp
}

func (b *BaZhi) getGanPosition(str string) int {
	// 返回输入的天干所对应的位置
	//allstr := strings.Join(b.Ctg[:], "")
	//
	//return strings.Index(allstr, str)
	for i, v := range b.Ctg {
		if v == str {
			return i
		}
	}

	return -1

}
func (b *BaZhi) getZhiPosition(str string) int {
	//allstr := strings.Join(b.Cdz[:], "")

	for i, v := range b.Cdz {
		if v == str {
			return i
		}
	}

	return -1

	//return strings.Index(allstr, str)
}

func (b *BaZhi) getLiuNianSLiuYue(yGan float64) []map[string]string {
	var gan, zhi, i, tg, dz, monBeginGan float64

	monthGan := []int{2, 4, 6, 8, 0}

	// 获得的位置对5求余来源于：甲己对应丙，乙庚对应戊，丙辛对应庚，丁壬对应壬，戊癸对应甲，以此类推
	monBeginGan = math.Mod(yGan, 5)
	gan = float64(monthGan[int(monBeginGan)])
	zhi = 2
	tmp := make([]map[string]string, 0)
	for i = 0; i < 12; i++ {

		tg = math.Mod(gan, 10.0)
		gan++

		dz = math.Mod(zhi, 12.0)
		zhi++
		tmp2 := make(map[string]string, 24)
		tmp2["g"] = strconv.Itoa(int(tg))
		tmp2["z"] = strconv.Itoa(int(dz))
		tmp2["msg"] = fmt.Sprintf("%s%s", b.Ctg[int(tg)], b.Cdz[int(dz)])
		//tmp[len(tmp)] = tmp2
		tmp = append(tmp, tmp2)
	}
	return tmp
}

//大运 gd 0男1女
func (b *BaZhi) GetYun(gd int, dtime int) (map[string]int, string, []string, []string, []map[string]float64, string, map[string]map[string]map[string]string) {
	var span float64
	yy, _ := b.formatDate("Y", dtime, true)
	mm, _ := b.formatDate("m", dtime, true)
	dd, _ := b.formatDate("d", dtime, true)
	hh, _ := b.formatDate("H", dtime, true)
	mt, _ := b.formatDate("i", dtime, true)
	ss, _ := b.formatDate("s", dtime, true)

	//fmt.Println("计算的日期", yy, mm, dd, hh, mt, ss)
	//ret = {};
	//big_info = []
	//tg, dz, jd, jq, ix
	tg, dz, jd, jq, ix := b.GetGanZhi(float64(yy), float64(mm), float64(dd), float64(hh), float64(mt), float64(ss), float64(dtime))
	//fmt.Println(tg, dz, jd, jq, ix)
	//fmt.Println(">>>>>>>>>>>>>>>>>>>>>>")
	tgpn, err := strconv.ParseFloat(tg[0], 64)
	if err != nil {
		panic(err)
	}
	pn := math.Mod(tgpn, 2) //起大运.阴阳年干:0阳年1阴年

	jieqi := make(map[string]map[string]string)
	jqbeg := make(map[string]string)
	jqend := make(map[string]string)
	ret := make(map[string]map[string]map[string]string)

	jqwei1 := ((ix-1)*2.0 + 1.0) % 24.0

	jqbeg["name"] = b.JqAll[jqwei1-1]

	begt := b.Julian2Solar(jq[ix], false)
	jqbeg["time"] = fmt.Sprintf("%d-%d-%d %d:%d:%d", begt[0], begt[1], begt[2], begt[3], begt[4], begt[5])

	jq1 := jqwei1 + 1
	if jq1 >= 24 {
		jq1 = jq1 % 24
	}
	//fmt.Println("jqwei1>>>>>>", jq1, dtime)
	jqend["name"] = b.JqAll[jq1]

	//fmt.Println(jqend["name"])

	//if dtime == -28602000 {
	//	return nil, "", tg, dz, nil, "", ret
	//}

	engt := b.Julian2Solar(jq[ix+1], false)
	jqend["time"] = fmt.Sprintf("%d-%d-%d %d:%d:%d", engt[0], engt[1], engt[2], engt[3], engt[4], engt[5])
	//jqend["time"] = fmt.Sprintf("%d", b.Julian2Solar(jq[ix+1], false))
	jieqi["beg"] = jqbeg
	jieqi["end"] = jqend

	ret["jieqi"] = jieqi
	var bigInfo []map[string]float64
	var begTime float64
	if (gd == 0 && pn == 0) || (gd == 1 && pn == 1) { //起大运时间,阳男阴女顺排
		span = jq[ix+1] - jd //往后数一个节,计算时间跨度

		utimeArr := b.Julian2Solar(jq[ix+1], false) //所属气节时间
		timeLocation, _ := time.LoadLocation("Asia/Shanghai")
		dateU := time.Date(int(utimeArr[0]), time.Month(utimeArr[1]), int(utimeArr[2]), int(utimeArr[3]), int(utimeArr[4]), int(utimeArr[5]), 0, timeLocation)

		utime := float64(dateU.Unix())

		cha := utime - float64(dtime)
		var i int

		begTime = float64(dtime) + cha*120.0

		_, begyObj := b.formatDate("", int(begTime), true)

		begyjq := b.GetFirstJq(float64(begyObj["y"])) //取得这一年的节 立春

		begyjd := b.Solar2Julian(float64(begyObj["y"]), float64(begyObj["m"]), float64(begyObj["d"]), float64(begyObj["h"]), float64(begyObj["i"]), float64(begyObj["s"]))

		begy := begyObj["y"]
		if begyjd < begyjq {
			begy--
		}

		for i = 1; i <= 12; i++ { //大运干支
			bigTmp := make(map[string]float64)
			tgf, err := strconv.ParseFloat(tg[1], 64)
			if err != nil {
				panic(err)
			}
			dzf, err := strconv.ParseFloat(dz[1], 64)
			if err != nil {
				panic(err)
			}

			bigTmp["tg"] = math.Mod(tgf+float64(i), 10)
			bigTmp["dz"] = math.Mod(dzf+float64(i), 12)
			bigTmp["y"] = float64(begy + ((i - 1) * 10))
			bigTmp["age"] = float64(begy + ((i - 1) * 10) - yy + 1)
			//if bigInfo == nil {
			//	bigInfo = make([]map[string]float64)
			//}
			bigInfo = append(bigInfo, bigTmp)
			//bigInfo[len(bigInfo)] = bigTmp
		}
	} else {
		span = jd - jq[ix]

		utimeArr := b.Julian2Solar(jq[ix], false)

		timeLocation, _ := time.LoadLocation("Asia/Shanghai")
		dateU := time.Date(int(utimeArr[0]), time.Month(utimeArr[1]), int(utimeArr[2]), int(utimeArr[3]), int(utimeArr[4]), int(utimeArr[5]), 0, timeLocation)

		utime := float64(dateU.Unix())

		//utime = math.Floor(utime)
		cha := float64(dtime) - utime

		begTime = float64(dtime) + cha*120

		_, begyObj := b.formatDate("", int(begTime), true)

		begyjq := b.GetFirstJq(float64(begyObj["y"])) //取得这一年的节 立春

		begyjd := b.Solar2Julian(float64(begyObj["y"]), float64(begyObj["m"]), float64(begyObj["d"]), float64(begyObj["h"]), float64(begyObj["i"]), float64(begyObj["s"]))

		begy := begyObj["y"]
		if begyjd < begyjq {
			begy--
		}

		for i := 1; i <= 12; i++ { //大运干支
			bigTmp := make(map[string]float64)
			tgf, err := strconv.ParseFloat(tg[1], 64)
			if err != nil {
				panic(err)
			}
			dzf, err := strconv.ParseFloat(dz[1], 64)
			if err != nil {
				panic(err)
			}

			tgff := tgf + 20.0 - float64(i)
			bigTmp["tg"] = math.Mod(tgff, 10)
			dzff := dzf + 24.0 - float64(i)
			bigTmp["dz"] = math.Mod(dzff, 12)
			bigTmp["y"] = float64(begy + ((i - 1) * 10))
			bigTmp["age"] = float64(begy + ((i - 1) * 10) - yy + 1)
			//if big_info[len(big_info)] == nil {
			//	big_info[0] = make(map[string]float64)
			//}
			bigInfo = append(bigInfo, bigTmp)
		}
	}

	//start_jdtime := jd + span * 120 //三天折合一年,一天折合四个月,一个时辰折合十天,一个小时折合五天,反推得到一年按360天算

	days := math.Floor(span * 4 * 30)                  //折合成天数:三天折合一年,一天折合四个月,一个时辰折合十天,一个小时折合五天,反推得到一年按360天算,一个月按30天算
	y := math.Floor(days / 360)                        //三天折合一年
	m := math.Floor(math.Mod(days, 360) / 30)          //一天折合四个月
	d := math.Floor(math.Mod(math.Mod(days, 360), 30)) //一个小时折合五天

	_, begtime := b.formatDate("", int(begTime), true)
	var bazi string

	for i := 0; i <= 3; i++ {
		in, err := strconv.ParseFloat(tg[i], 64)
		if err != nil {
			fmt.Println("i.>>>>>", i)
			panic(err)
		}

		din, err := strconv.ParseFloat(dz[i], 64)
		if err != nil {
			panic(err)
		}

		//fmt.Println("in>>>>>>>", in, int(in))
		//fmt.Println("din>>>>>>>", din, int(din))

		bazi += b.Ctg[int(in)]
		bazi += b.Cdz[int(din)]
	}

	//ret["dz"] = dz
	//ret["big_info"] = big_info
	startDesc := fmt.Sprintf("%d年%d月%d天起运", int(y), int(m), int(d))
	//fmt.Println(">>>>>", bazi)
	return begtime, bazi, tg, dz, bigInfo, startDesc, ret
}

func (b *BaZhi) GetLiuNian(yy float64) []map[string]string {
	yy = math.Floor(yy)
	tmp := make([]map[string]string,0)
	ygz := ((int(yy)+4712+24)%60 + 60) % 60
	g := ygz % 10
	z := ygz % 12

	for i := 0; i < 10; i++ {
		tmp2 := make(map[string]string)
		gm := (g + i) % 10
		tmp2["g"] = fmt.Sprintf("%d", gm) //年干
		zm := (z + i) % 12
		tmp2["z"] = fmt.Sprintf("%d", zm) //年支

		tmp2["y"] = fmt.Sprintf("%d", int(yy)+i)
		tmp2["g_str"] = b.Ctg[gm]
		tmp2["z_str"] = b.Cdz[zm]

		tmp = append(tmp, tmp2)
		//tmp[len(tmp)] = tmp2
	}
	return tmp
}

func (b *BaZhi) GetLiuYue(yy float64) []map[string]string {
	yy = math.Floor(yy)
	y := b.GetPureJQsinceSpring(yy)
	all := make([]map[string]string,0)

	ygz := math.Mod(math.Mod(yy+4712+24, 60)+60, 60)
	yg := math.Mod(ygz, 10)

	yArr := b.getLiuNianSLiuYue(yg)

	for i := 1; i < 13; i++ {
		tmp := yArr[len(all)]
		tmp2 := b.setFromJD(y[i], true)
		tmp["m"] = fmt.Sprintf("%f", tmp2[1])
		tmp["d"] = fmt.Sprintf("%f", tmp2[2])
		tmp["y"] = fmt.Sprintf("%f", tmp2[0])

		date, _ := time.Parse("2006/01/02", fmt.Sprintf("%s/%s/%s", tmp["y"], tmp["m"], tmp["d"]))
		tmp["begtime"] = fmt.Sprintf("%d", date.Unix())

		tmp3 := b.setFromJD(y[i+1], true)
		date2, _ := time.Parse("2006/01/02", fmt.Sprintf("%f/%f/%f", tmp3[0], tmp3[1], tmp3[2]))
		tmp["endtime"] = fmt.Sprintf("%d", date2.Unix())
		all = append(all, tmp)
		//all[len(all)] = tmp
	}
	return all
}

func (b *BaZhi) GetLiuRi(beg, end float64) (map[int]map[string]int, map[int]string) {
	beg = math.Floor(beg)
	end = math.Floor(end)

	day := make(map[int]map[string]int)
	daymsg := make(map[int]string)
	var z = 0

	dtime := beg / 1000

	dtime = math.Floor(dtime)

	ri := b.getRizhuIndex(int(dtime))

	for i := beg; i < end; i = i + 86400000 {
		_, tmp := b.formatDate("ymd", int(i), false)
		gii, _ := strconv.Atoi(ri["g"])
		zii, _ := strconv.Atoi(ri["z"])

		tmp["g"] = (gii + z) % 10
		tmp["z"] = (zii + z) % 12

		day[len(day)] = tmp
		daymsg[len(daymsg)] = b.Ctg[tmp["g"]] + b.Cdz[tmp["z"]]
		z++
	}
	return day, daymsg
}

func (b *BaZhi) GetLiuRISLiuShi(Gan float64) ([]map[string]float64, []string) {
	var zhi, i, tg, dz, BeginGan, start, end float64

	GanArr := []int{0, 2, 4, 6, 8}
	//$monthGan = "丙戊庚壬甲";
	// 获得的位置对5求余来源于：甲己对应丙，乙庚对应戊，丙辛对应庚，丁壬对应壬，戊癸对应甲，以此类推
	BeginGan = math.Mod(Gan, 5)
	gan := GanArr[int(BeginGan)]
	zhi = 0

	tmp := make([]map[string]float64, 0)
	tmpMsg := make([]string, 0)

	for i = 0; i < 13; i++ {
		gan++
		tg = math.Mod(float64(gan), 10)
		zhi++
		dz = math.Mod(zhi, 12)
		start = 2*i - 1
		end = 2*i + 1
		if start == -1 {
			start = 0
		}
		if end == 25 {
			end = 24
		}
		tmp2 := make(map[string]float64)
		tmp2["g"] = tg
		tmp2["z"] = dz
		tmp2["beg"] = start
		tmp2["end"] = end

		tmpMsg = append(tmpMsg, b.Ctg[int(tg)]+b.Cdz[int(dz)])
		tmp = append(tmp, tmp2)
		//tmpMsg[len(tmp)] =
		//tmp[len(tmp)] = tmp2
	}

	return tmp, tmpMsg
}

func (b *BaZhi) formatDate(t string, tm int, untime bool) (int, map[string]int) {
	var utime int
	if untime {
		//utime = tm * 1000
		utime = tm * 1
	} else {
		utime = tm * 1
	}

	if len(strconv.Itoa(utime)) > 10 {
		utime = utime / 1000
	}
	//fmt.Println(utime)

	//1077292800000
	now := time.Unix(int64(utime), 0)

	switch t {
	case "Y", "y":
		val := now.Year()
		return val, nil
	case "m", "n":
		//val := int(now.Month()) + 1
		val := int(now.Month())
		return val, nil
	case "d", "j":
		val := now.Day()
		return val, nil
	case "H":
		val := now.Hour()
		return val, nil
	case "i":
		val := now.Minute()
		return val, nil
	case "s":
		val := now.Second()
		return val, nil
	case "ymd":
		val := make(map[string]int)
		val["y"] = now.Year()
		val["m"] = int(now.Month())
		val["d"] = now.Day()
		return -1, val
	default:
		val := make(map[string]int)
		val["y"] = now.Year()
		val["m"] = int(now.Month())
		val["d"] = now.Day()
		val["h"] = now.Hour()
		val["i"] = now.Minute()
		val["s"] = now.Second()
		return -1, val
	}
}

func (b *BaZhi) setFromJD(jd float64, UTC bool) []float64 {
	if UTC {
		jd -= b.deltatT2(jd - b.J2000)
	}

	jd += 0.5

	// 取得日数的整数部份A及小数部分F
	A := math.Floor(jd)
	F := jd - A
	var D, Y, M, h, m, s float64

	if A > 2299161 {
		D = math.Floor((A - 1867216.25) / 36524.25)
		A += 1 + D - math.Floor(D/4)
	}

	A += 1524 // 向前移4年零2个月

	Y = math.Floor((A - 122.1) / 365.2500001) // 年
	D = A - math.Floor(365.2500001*Y)         // 去除整年日数后余下日数
	M = math.Floor(D / 30.6001)               // 月数
	D = D - math.Floor(M*30.6001)             // 去除整月日数后余下日数
	Y -= 4716
	M--
	if M > 12 {
		M -= 12
	}

	if M <= 2 {
		Y++
	}

	// 日的小数转为时分秒
	F *= 24
	h = math.Floor(F)
	F -= h
	F *= 60

	m = math.Floor(F)

	F -= m
	F *= 60
	s = math.Floor(F)
	return []float64{Y, M, D, h, m, s}

}

// 传入儒略日(J2000起算),计算UTC与原子时的差(单位:日)
func (b *BaZhi) deltatT2(jd float64) float64 {
	return b.deltatT(jd/365.2425+2000.0) / 86400.0
}

func (b *BaZhi) deltatT(y float64) float64 {
	var t1, t2, t3 float64
	var i int
	for i = 0; i < 100; i += 5 {
		if y < b.Dts[i+5] || i == 95 {
			break
		}
	}

	t1 = (y - b.Dts[i]) / (b.Dts[i+5] - b.Dts[i]) * 10
	t2 = t1 * t1
	t3 = t2 * t1
	return b.Dts[i+1] + b.Dts[i+2]*t1 + b.Dts[i+3]*t2 + b.Dts[i+4]*t3
}

// ==================已知位置反求时间===================

func (b *BaZhi) jiaoCal(t1, jiao float64, lx float64) float64 {
	// t1是J2000起算儒略日数
	// 已知角度(jiao)求时间(t)
	// lx=0是太阳黄经达某角度的时刻计算(用于节气计算)
	// lx=1是日月角距达某角度的时刻计算(用于定朔望等)
	// 传入的t1是指定角度对应真时刻t的前一些天
	// 对于节气计算,应满足t在t1到t1+360天之间,对于Y年第n个节气(n=0是春分),t1可取值Y*365.2422+n*15.2
	// 对于朔望计算,应满足t在t1到t1+25天之间,在此范围之外,求右边的根

	t := 0.0
	var v1, v2, t2 float64
	t2 = t1
	if lx == 0 {
		t2 += 360 // 在t1到t2范围内求解(范气360天范围),结果置于t
	} else {
		t2 += 25
	}

	jiao *= math.Pi / 180 // 待搜索目标角

	//os.Exit(1)
	// 利用截弦法计算

	v1 = b.jiaoCai(lx, t1, jiao) // v1,v2为t1,t2时对应的黄经

	v2 = b.jiaoCai(lx, t2, jiao)
	//spew.Dump(v2)
	if v1 < v2 {
		v2 -= 2 * math.Pi // 减2pi作用是将周期性角度转为连续角度
	}

	var i int
	var k = 1.0
	// k是截弦的斜率

	for i = 0; i < 10; i++ { // 快速截弦求根,通常截弦三四次就已达所需精度

		k2 := (v2 - v1) / (t2 - t1) // 算出斜率
		if math.Abs(k2) > 1e-15 {
			k = k2 // 差商可能为零,应排除
		}
		t = t1 - v1/k
		v := b.jiaoCai(lx, t, jiao) // 直线逼近法求根(直线方程的根)

		if v > 1 {
			v -= 2 * math.Pi // 一次逼近后,v1就已接近0,如果很大,则应减1周
		}

		if math.Abs(v) < 1e-8 {
			break // 已达精度
		}
		t1 = t2
		v1 = v2
		t2 = t
		v2 = v // 下一次截弦
	}

	return t
}

func (b *BaZhi) jiaoCai(lx, t, jiao float64) float64 {

	// lx=1时计算t时刻日月角距与jiao的差, lx=0计算t时刻太阳黄经与jiao的差
	var sun = b.earCal(t) // 计算太阳真位置(先算出日心坐标中地球的位置)

	sun[0] = sun[0] + math.Pi

	sun[1] = -sun[1] // 转为地心坐标

	if lx == 0 {

		d := b.Nutation(t)

		sun[0] += d["l"] // 补黄经章动

		sun = b.AddGxc(t, sun) // 补周年光行差

		return b.rad2mrad(jiao - sun[0])
	}
	moon := b.MoonCal(t) // 日月角差与章动无关

	return b.rad2mrad(jiao - (moon[0] - sun[0]))
}

func (b *BaZhi) earCal(jd float64) []float64 {
	var t1, t2, t4, t5, t3 float64
	b.EnnT = jd / 365250
	llr := make([]float64, 5)
	t1 = b.EnnT
	t2 = t1 * t1
	t3 = t2 * t1
	t4 = t3 * t1
	t5 = t4 * t1

	llr[0] = b.Enn(b.E10) + b.Enn(b.E11)*t1 + b.Enn(b.E12)*t2 + b.Enn(b.E13)*t3 + b.Enn(b.E14)*t4 + b.Enn(b.E15)*t5

	llr[1] = b.Enn(b.E20) + b.Enn(b.E21)*t1
	llr[2] = b.Enn(b.E30) + b.Enn(b.E31)*t1 + b.Enn(b.E32)*t2 + b.Enn(b.E33)*t3
	llr[0] = b.rad2mrad(llr[0])
	return llr
}

func (b *BaZhi) Enn(f []float64) float64 {
	var v float64
	var num, i int
	v = 0
	num = len(f)
	for i = 0; i < num; i += 3 {
		v += f[i] * math.Cos(f[i+1]+b.EnnT*f[i+2])
	}
	return v
}

// 对超过0-2PI的角度转为0-2PI
func (b *BaZhi) rad2mrad(v float64) float64 {

	v = math.Mod(v, 2*math.Pi)

	if v < 0 {
		return v + 2*math.Pi
	}

	return v
}

// 计算黄经章动及交角章动
func (b *BaZhi) Nutation(t float64) map[string]float64 {
	d := make(map[string]float64, 10)
	d["l"] = 0
	d["o"] = 0
	t = t / 36525
	var t1 = t
	var t2 = t1 * t1
	var t3 = t2 * t1
	var t4 = t3 * t1 // t5=t4*t1;
	var nutB = b.NutB
	var length = len(nutB)
	var i int
	for i = 0; i < length; i += 9 {
		c := nutB[i] + nutB[i+1]*t1 + nutB[i+2]*t2 + nutB[i+3]*t3 + nutB[i+4]*t4
		d["l"] += (nutB[i+5] + nutB[i+6]*t/10) * math.Sin(c) // 黄经章动
		d["o"] += (nutB[i+7] + nutB[i+8]*t/10) * math.Cos(c) // 交角章动
	}
	d["l"] /= b.Rad * 10000 // 黄经章动
	d["o"] /= b.Rad * 10000 // 交角章动
	return d
}

// 恒星周年光行差计算(黄道坐标中)
func (b *BaZhi) AddGxc(t float64, zb []float64) []float64 {
	var t1, t2, t3, t4, L, p, e float64
	t1 = t / 36525
	t2 = t1 * t1
	t3 = t2 * t1

	t4 = t3 * t1

	L = b.GXCl[0] + b.GXCl[1]*t1 + b.GXCl[2]*t2 + b.GXCl[3]*t3 + b.GXCl[4]*t4
	p = b.GXCp[0] + b.GXCp[1]*t1 + b.GXCp[2]*t2
	e = b.GXCe[0] + b.GXCe[1]*t1 + b.GXCe[2]*t2

	var dL = L - zb[0]
	var dP = p - zb[0]
	zb[0] -= b.GXCk * (math.Cos(dL) - e*math.Cos(dP)) / math.Cos(zb[1])
	//spew.Dump(zb[0])
	//os.Exit(1)
	zb[1] -= b.GXCk * math.Sin(zb[1]) * (math.Sin(dL) - e*math.Sin(dP))
	zb[0] = b.rad2mrad(zb[0])

	return zb
}

// 返回月球位置,返回地心Date黄道坐标
func (b *BaZhi) MoonCal(jd float64) []float64 {
	var t1, t2, t3, t4 float64
	b.MnnT = jd / 36525
	t1 = b.MnnT
	t2 = t1 * t1
	t3 = t2 * t1
	t4 = t3 * t1
	llr := make([]float64, 10)

	llr[0] = (b.Mnn(b.M10) + b.Mnn(b.M11)*t1 + b.Mnn(b.M12)*t2) / b.Rad
	llr[1] = (b.Mnn(b.M20) + b.Mnn(b.M21)*t1) / b.Rad
	llr[2] = (b.Mnn(b.M30) + b.Mnn(b.M31)*t1) * 0.999999949827
	llr[0] = llr[0] + b.M1n[0] + b.M1n[1]*t1 + b.M1n[2]*t2 + b.M1n[3]*t3 + b.M1n[4]*t4
	llr[0] = b.rad2mrad(llr[0]) // 地心Date黄道原点坐标(不含岁差)
	llr = b.AddPrece(jd, llr)   // 补岁差
	return llr
}

func (b *BaZhi) Mnn(f []float64) float64 {
	var v, t1, t2, t3, t4 float64
	v = 0
	t1 = b.MnnT
	t2 = t1 * t1
	t3 = t2 * t1
	t4 = t3 * t1
	num := len(f)

	for i := 0; i < num; i += 6 {
		v += f[i] * math.Sin(f[i+1]+t1*f[i+2]+t2*f[i+3]+t3*f[i+4]+t4*f[i+5])
	}
	return v
}

func (b *BaZhi) AddPrece(jd float64, zb []float64) []float64 {
	var t1, v, t float64
	t = 1
	v = 0
	t1 = jd / 365250
	for i := 1; i < 8; i++ {
		t *= t1
		v += b.PreceB[i] * t
	}
	zb[0] = b.rad2mrad(zb[0] + (v+2.9965*t1)/b.Rad)
	return zb
}
